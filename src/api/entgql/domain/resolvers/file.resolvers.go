package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"

	"github.com/GoLabra/labra/src/api/entgql/ent"
)

// CreateFile is the resolver for the createFile field.
func (r *mutationResolver) CreateFile(ctx context.Context, data ent.CreateFileInput) (*ent.File, error) {
	return r.Service.File.Create(ctx, data)
}

// CreateManyFiles is the resolver for the createManyFiles field.
func (r *mutationResolver) CreateManyFiles(ctx context.Context, data []*ent.CreateFileInput) ([]*ent.File, error) {
	var dataVal []ent.CreateFileInput
	for _, createInput := range data {
		dataVal = append(dataVal, *createInput)
	}
	return r.Service.File.CreateMany(ctx, dataVal)
}

// UpdateFile is the resolver for the updateFile field.
func (r *mutationResolver) UpdateFile(ctx context.Context, where ent.FileWhereUniqueInput, data ent.UpdateFileInput) (*ent.File, error) {
	return r.Service.File.Update(ctx, where, data)
}

// UpdateManyFiles is the resolver for the updateManyFiles field.
func (r *mutationResolver) UpdateManyFiles(ctx context.Context, where ent.FileWhereInput, data ent.UpdateFileInput) (int, error) {
	return r.Service.File.UpdateMany(ctx, where, data)
}

// UpsertFile is the resolver for the upsertFile field.
func (r *mutationResolver) UpsertFile(ctx context.Context, data ent.CreateFileInput) (*ent.File, error) {
	return r.Service.File.Upsert(ctx, data)
}

// UpsertManyFiles is the resolver for the upsertManyFiles field.
func (r *mutationResolver) UpsertManyFiles(ctx context.Context, data []*ent.CreateFileInput) (int, error) {
	var dataVal []ent.CreateFileInput
	for _, upsertInput := range data {
		dataVal = append(dataVal, *upsertInput)
	}
	return r.Service.File.UpsertMany(ctx, dataVal)
}

// DeleteFile is the resolver for the deleteFile field.
func (r *mutationResolver) DeleteFile(ctx context.Context, where ent.FileWhereUniqueInput) (*ent.File, error) {
	return r.Service.File.Delete(ctx, where)
}

// DeleteManyFiles is the resolver for the deleteManyFiles field.
func (r *mutationResolver) DeleteManyFiles(ctx context.Context, where ent.FileWhereInput) (int, error) {
	return r.Service.File.DeleteMany(ctx, where)
}

// Files is the resolver for the files field.
func (r *queryResolver) Files(ctx context.Context, where *ent.FileWhereInput, orderBy *ent.FileOrder, skip *int, first *int, last *int) ([]*ent.File, error) {
	return r.Service.File.Get(ctx, where, orderBy, skip, first, last)
}

// FilesConnection is the resolver for the filesConnection field.
func (r *queryResolver) FilesConnection(ctx context.Context, where *ent.FileWhereInput, orderBy *ent.FileOrder, skip *int, first *int, last *int) (*ent.FileConnection, error) {
	return r.Service.File.Connection(ctx, where, orderBy, skip, first, last)
}
