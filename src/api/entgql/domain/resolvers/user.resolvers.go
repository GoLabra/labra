package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"

	"github.com/GoLabra/labra/src/api/entgql/ent"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, data ent.CreateUserInput) (*ent.User, error) {
	return r.Service.User.Create(ctx, data)
}

// CreateManyUsers is the resolver for the createManyUsers field.
func (r *mutationResolver) CreateManyUsers(ctx context.Context, data []*ent.CreateUserInput) ([]*ent.User, error) {
	var dataVal []ent.CreateUserInput
	for _, createInput := range data {
		dataVal = append(dataVal, *createInput)
	}
	return r.Service.User.CreateMany(ctx, dataVal)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, where ent.UserWhereUniqueInput, data ent.UpdateUserInput) (*ent.User, error) {
	return r.Service.User.Update(ctx, where, data)
}

// UpdateManyUsers is the resolver for the updateManyUsers field.
func (r *mutationResolver) UpdateManyUsers(ctx context.Context, where ent.UserWhereInput, data ent.UpdateUserInput) (int, error) {
	return r.Service.User.UpdateMany(ctx, where, data)
}

// UpsertUser is the resolver for the upsertUser field.
func (r *mutationResolver) UpsertUser(ctx context.Context, data ent.CreateUserInput) (*ent.User, error) {
	return r.Service.User.Upsert(ctx, data)
}

// UpsertManyUsers is the resolver for the upsertManyUsers field.
func (r *mutationResolver) UpsertManyUsers(ctx context.Context, data []*ent.CreateUserInput) (int, error) {
	var dataVal []ent.CreateUserInput
	for _, upsertInput := range data {
		dataVal = append(dataVal, *upsertInput)
	}
	return r.Service.User.UpsertMany(ctx, dataVal)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, where ent.UserWhereUniqueInput) (*ent.User, error) {
	return r.Service.User.Delete(ctx, where)
}

// DeleteManyUsers is the resolver for the deleteManyUsers field.
func (r *mutationResolver) DeleteManyUsers(ctx context.Context, where ent.UserWhereInput) (int, error) {
	return r.Service.User.DeleteMany(ctx, where)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, where *ent.UserWhereInput, orderBy *ent.UserOrder, skip *int, first *int, last *int) ([]*ent.User, error) {
	return r.Service.User.Get(ctx, where, orderBy, skip, first, last)
}

// UsersConnection is the resolver for the usersConnection field.
func (r *queryResolver) UsersConnection(ctx context.Context, where *ent.UserWhereInput, orderBy *ent.UserOrder, skip *int, first *int, last *int) (*ent.UserConnection, error) {
	return r.Service.User.Connection(ctx, where, orderBy, skip, first, last)
}
