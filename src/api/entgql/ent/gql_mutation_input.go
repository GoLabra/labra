// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

type CreateManyFileInput struct {
	Create  []*CreateFileInput      `json:"create,omitempty"`
	Connect []*FileWhereUniqueInput `json:"connect,omitempty"`
}

type CreateOneFileInput struct {
	Create  *CreateFileInput      `json:"create,omitempty"`
	Connect *FileWhereUniqueInput `json:"connect,omitempty"`
}

type UpdateManyFileInput struct {
	Create     []*CreateFileInput      `json:"create,omitempty"`
	Connect    []*FileWhereUniqueInput `json:"connect,omitempty"`
	Disconnect []*FileWhereUniqueInput `json:"disconnect,omitempty"`
	Delete     []*FileWhereUniqueInput `json:"delete,omitempty"`
}

type UpdateOneFileInput struct {
	Create  *CreateFileInput      `json:"create,omitempty"`
	Connect *FileWhereUniqueInput `json:"connect,omitempty"`
	Unset   *bool                 `json:"unset,omitempty"`
	Delete  *bool                 `json:"delete,omitempty"`
}
type CreateManyPermissionInput struct {
	Create  []*CreatePermissionInput      `json:"create,omitempty"`
	Connect []*PermissionWhereUniqueInput `json:"connect,omitempty"`
}

type CreateOnePermissionInput struct {
	Create  *CreatePermissionInput      `json:"create,omitempty"`
	Connect *PermissionWhereUniqueInput `json:"connect,omitempty"`
}

type UpdateManyPermissionInput struct {
	Create     []*CreatePermissionInput      `json:"create,omitempty"`
	Connect    []*PermissionWhereUniqueInput `json:"connect,omitempty"`
	Disconnect []*PermissionWhereUniqueInput `json:"disconnect,omitempty"`
	Delete     []*PermissionWhereUniqueInput `json:"delete,omitempty"`
}

type UpdateOnePermissionInput struct {
	Create  *CreatePermissionInput      `json:"create,omitempty"`
	Connect *PermissionWhereUniqueInput `json:"connect,omitempty"`
	Unset   *bool                       `json:"unset,omitempty"`
	Delete  *bool                       `json:"delete,omitempty"`
}
type CreateManyRoleInput struct {
	Create  []*CreateRoleInput      `json:"create,omitempty"`
	Connect []*RoleWhereUniqueInput `json:"connect,omitempty"`
}

type CreateOneRoleInput struct {
	Create  *CreateRoleInput      `json:"create,omitempty"`
	Connect *RoleWhereUniqueInput `json:"connect,omitempty"`
}

type UpdateManyRoleInput struct {
	Create     []*CreateRoleInput      `json:"create,omitempty"`
	Connect    []*RoleWhereUniqueInput `json:"connect,omitempty"`
	Disconnect []*RoleWhereUniqueInput `json:"disconnect,omitempty"`
	Delete     []*RoleWhereUniqueInput `json:"delete,omitempty"`
}

type UpdateOneRoleInput struct {
	Create  *CreateRoleInput      `json:"create,omitempty"`
	Connect *RoleWhereUniqueInput `json:"connect,omitempty"`
	Unset   *bool                 `json:"unset,omitempty"`
	Delete  *bool                 `json:"delete,omitempty"`
}
type CreateManyUserInput struct {
	Create  []*CreateUserInput      `json:"create,omitempty"`
	Connect []*UserWhereUniqueInput `json:"connect,omitempty"`
}

type CreateOneUserInput struct {
	Create  *CreateUserInput      `json:"create,omitempty"`
	Connect *UserWhereUniqueInput `json:"connect,omitempty"`
}

type UpdateManyUserInput struct {
	Create     []*CreateUserInput      `json:"create,omitempty"`
	Connect    []*UserWhereUniqueInput `json:"connect,omitempty"`
	Disconnect []*UserWhereUniqueInput `json:"disconnect,omitempty"`
	Delete     []*UserWhereUniqueInput `json:"delete,omitempty"`
}

type UpdateOneUserInput struct {
	Create  *CreateUserInput      `json:"create,omitempty"`
	Connect *UserWhereUniqueInput `json:"connect,omitempty"`
	Unset   *bool                 `json:"unset,omitempty"`
	Delete  *bool                 `json:"delete,omitempty"`
}

// CreateFileInput represents a mutation input for creating files.
type CreateFileInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Name      string
	Content   string
	/*
	   CreatedBy  *CreateOneUserWithoutFileInput
	   CreatedByID *string
	   UpdatedBy  *CreateOneUserWithoutFileInput
	   UpdatedByID *string*/
	CreatedBy   *CreateOneUserInput
	CreatedByID *string
	UpdatedBy   *CreateOneUserInput
	UpdatedByID *string
}

// Mutate applies the CreateFileInput on the FileMutation builder.
func (i *CreateFileInput) Mutate(m *FileMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetContent(i.Content)
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if v := i.UpdatedByID; v != nil {
		m.SetUpdatedByID(*v)
	}
}

// SetInput applies the change-set in the CreateFileInput on the FileCreate builder.
func (c *FileCreate) SetInput(i CreateFileInput) *FileCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateFileInput represents a mutation input for updating files.
type UpdateFileInput struct {
	ClearCreatedAt bool
	CreatedAt      *time.Time
	ClearUpdatedAt bool
	UpdatedAt      *time.Time
	Name           *string
	Content        *string
	/*
	   ClearCreatedBy bool
	   CreatedBy  *CreateOneUserWithoutFileInput
	   CreatedByID *string
	   ClearUpdatedBy bool
	   UpdatedBy  *CreateOneUserWithoutFileInput
	   UpdatedByID *string*/
	ClearCreatedBy bool
	CreatedBy      *UpdateOneUserInput
	CreatedByID    *string
	ClearUpdatedBy bool
	UpdatedBy      *UpdateOneUserInput
	UpdatedByID    *string
}

// Mutate applies the UpdateFileInput on the FileMutation builder.
func (i *UpdateFileInput) Mutate(m *FileMutation) {
	if i.ClearCreatedAt {
		m.ClearCreatedAt()
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedByID; v != nil {
		m.SetUpdatedByID(*v)
	}
}

// SetInput applies the change-set in the UpdateFileInput on the FileUpdate builder.
func (c *FileUpdate) SetInput(i UpdateFileInput) *FileUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateFileInput on the FileUpdateOne builder.
func (c *FileUpdateOne) SetInput(i UpdateFileInput) *FileUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePermissionInput represents a mutation input for creating permissions.
type CreatePermissionInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Entity    string
	Operation *string
	/*
	   CreatedBy  *CreateOneUserWithoutPermissionInput
	   CreatedByID *string
	   UpdatedBy  *CreateOneUserWithoutPermissionInput
	   UpdatedByID *string
	   Role  *CreateOneRoleWithoutPermissionInput
	   RoleID *string*/
	CreatedBy   *CreateOneUserInput
	CreatedByID *string
	UpdatedBy   *CreateOneUserInput
	UpdatedByID *string
	Role        *CreateOneRoleInput
	RoleID      *string
}

// Mutate applies the CreatePermissionInput on the PermissionMutation builder.
func (i *CreatePermissionInput) Mutate(m *PermissionMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetEntity(i.Entity)
	if v := i.Operation; v != nil {
		m.SetOperation(*v)
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if v := i.UpdatedByID; v != nil {
		m.SetUpdatedByID(*v)
	}
	if v := i.RoleID; v != nil {
		m.SetRoleID(*v)
	}
}

// SetInput applies the change-set in the CreatePermissionInput on the PermissionCreate builder.
func (c *PermissionCreate) SetInput(i CreatePermissionInput) *PermissionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePermissionInput represents a mutation input for updating permissions.
type UpdatePermissionInput struct {
	ClearCreatedAt bool
	CreatedAt      *time.Time
	ClearUpdatedAt bool
	UpdatedAt      *time.Time
	Entity         *string
	Operation      *string
	/*
	   ClearCreatedBy bool
	   CreatedBy  *CreateOneUserWithoutPermissionInput
	   CreatedByID *string
	   ClearUpdatedBy bool
	   UpdatedBy  *CreateOneUserWithoutPermissionInput
	   UpdatedByID *string
	   ClearRole bool
	   Role  *CreateOneRoleWithoutPermissionInput
	   RoleID *string*/
	ClearCreatedBy bool
	CreatedBy      *UpdateOneUserInput
	CreatedByID    *string
	ClearUpdatedBy bool
	UpdatedBy      *UpdateOneUserInput
	UpdatedByID    *string
	ClearRole      bool
	Role           *UpdateOneRoleInput
	RoleID         *string
}

// Mutate applies the UpdatePermissionInput on the PermissionMutation builder.
func (i *UpdatePermissionInput) Mutate(m *PermissionMutation) {
	if i.ClearCreatedAt {
		m.ClearCreatedAt()
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Entity; v != nil {
		m.SetEntity(*v)
	}
	if v := i.Operation; v != nil {
		m.SetOperation(*v)
	}
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedByID; v != nil {
		m.SetUpdatedByID(*v)
	}
	if i.ClearRole {
		m.ClearRole()
	}
	if v := i.RoleID; v != nil {
		m.SetRoleID(*v)
	}
}

// SetInput applies the change-set in the UpdatePermissionInput on the PermissionUpdate builder.
func (c *PermissionUpdate) SetInput(i UpdatePermissionInput) *PermissionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePermissionInput on the PermissionUpdateOne builder.
func (c *PermissionUpdateOne) SetInput(i UpdatePermissionInput) *PermissionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRoleInput represents a mutation input for creating roles.
type CreateRoleInput struct {
	Name string
	/*
	   CreatedBy  *CreateOneUserWithoutRoleInput
	   CreatedByID *string
	   UpdatedBy  *CreateOneUserWithoutRoleInput
	   UpdatedByID *string
	   UserRoles  *CreateManyUserWithoutRoleInput
	       UserRoleIDs []string
	   Permissions  *CreateManyPermissionWithoutRoleInput
	       PermissionIDs []string*/
	CreatedBy     *CreateOneUserInput
	CreatedByID   *string
	UpdatedBy     *CreateOneUserInput
	UpdatedByID   *string
	UserRoles     *CreateManyUserInput
	UserRoleIDs   []string
	Permissions   *CreateManyPermissionInput
	PermissionIDs []string
}

// Mutate applies the CreateRoleInput on the RoleMutation builder.
func (i *CreateRoleInput) Mutate(m *RoleMutation) {
	m.SetName(i.Name)
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if v := i.UpdatedByID; v != nil {
		m.SetUpdatedByID(*v)
	}
	if v := i.UserRoleIDs; len(v) > 0 {
		m.AddUserRoleIDs(v...)
	}
	if v := i.PermissionIDs; len(v) > 0 {
		m.AddPermissionIDs(v...)
	}
}

// SetInput applies the change-set in the CreateRoleInput on the RoleCreate builder.
func (c *RoleCreate) SetInput(i CreateRoleInput) *RoleCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRoleInput represents a mutation input for updating roles.
type UpdateRoleInput struct {
	Name *string
	/*
	   ClearCreatedBy bool
	   CreatedBy  *CreateOneUserWithoutRoleInput
	   CreatedByID *string
	   ClearUpdatedBy bool
	   UpdatedBy  *CreateOneUserWithoutRoleInput
	   UpdatedByID *string
	   ClearUserRoles bool
	   UserRoles  *CreateManyUserWithoutRoleInput
	       AddUserRoleIDs []string
	       RemoveUserRoleIDs []string
	   ClearPermissions bool
	   Permissions  *CreateManyPermissionWithoutRoleInput
	       AddPermissionIDs []string
	       RemovePermissionIDs []string*/
	ClearCreatedBy      bool
	CreatedBy           *UpdateOneUserInput
	CreatedByID         *string
	ClearUpdatedBy      bool
	UpdatedBy           *UpdateOneUserInput
	UpdatedByID         *string
	ClearUserRoles      bool
	UserRoles           *UpdateManyUserInput
	AddUserRoleIDs      []string
	RemoveUserRoleIDs   []string
	ClearPermissions    bool
	Permissions         *UpdateManyPermissionInput
	AddPermissionIDs    []string
	RemovePermissionIDs []string
}

// Mutate applies the UpdateRoleInput on the RoleMutation builder.
func (i *UpdateRoleInput) Mutate(m *RoleMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedByID; v != nil {
		m.SetUpdatedByID(*v)
	}
	if i.ClearUserRoles {
		m.ClearUserRoles()
	}
	if v := i.AddUserRoleIDs; len(v) > 0 {
		m.AddUserRoleIDs(v...)
	}
	if v := i.RemoveUserRoleIDs; len(v) > 0 {
		m.RemoveUserRoleIDs(v...)
	}
	if i.ClearPermissions {
		m.ClearPermissions()
	}
	if v := i.AddPermissionIDs; len(v) > 0 {
		m.AddPermissionIDs(v...)
	}
	if v := i.RemovePermissionIDs; len(v) > 0 {
		m.RemovePermissionIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateRoleInput on the RoleUpdate builder.
func (c *RoleUpdate) SetInput(i UpdateRoleInput) *RoleUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRoleInput on the RoleUpdateOne builder.
func (c *RoleUpdateOne) SetInput(i UpdateRoleInput) *RoleUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name      *string
	Email     string
	Password  string
	FirstName string
	LastName  string
	/*
	   RefCreatedBy  *CreateManyUserWithoutUserInput
	       RefCreatedByIDs []string
	   CreatedBy  *CreateOneUserWithoutUserInput
	   CreatedByID *string
	   RefUpdatedBy  *CreateManyUserWithoutUserInput
	       RefUpdatedByIDs []string
	   UpdatedBy  *CreateOneUserWithoutUserInput
	   UpdatedByID *string
	   Roles  *CreateManyRoleWithoutUserInput
	       RoleIDs []string
	   DefaultRole  *CreateOneRoleWithoutUserInput
	   DefaultRoleID *string*/
	RefCreatedBy    *CreateManyUserInput
	RefCreatedByIDs []string
	CreatedBy       *CreateOneUserInput
	CreatedByID     *string
	RefUpdatedBy    *CreateManyUserInput
	RefUpdatedByIDs []string
	UpdatedBy       *CreateOneUserInput
	UpdatedByID     *string
	Roles           *CreateManyRoleInput
	RoleIDs         []string
	DefaultRole     *CreateOneRoleInput
	DefaultRoleID   *string
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	m.SetEmail(i.Email)
	m.SetPassword(i.Password)
	m.SetFirstName(i.FirstName)
	m.SetLastName(i.LastName)
	if v := i.RefCreatedByIDs; len(v) > 0 {
		m.AddRefCreatedByIDs(v...)
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if v := i.RefUpdatedByIDs; len(v) > 0 {
		m.AddRefUpdatedByIDs(v...)
	}
	if v := i.UpdatedByID; v != nil {
		m.SetUpdatedByID(*v)
	}
	if v := i.RoleIDs; len(v) > 0 {
		m.AddRoleIDs(v...)
	}
	if v := i.DefaultRoleID; v != nil {
		m.SetDefaultRoleID(*v)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	ClearName bool
	Name      *string
	Email     *string
	Password  *string
	FirstName *string
	LastName  *string
	/*
	   ClearRefCreatedBy bool
	   RefCreatedBy  *CreateManyUserWithoutUserInput
	       AddRefCreatedByIDs []string
	       RemoveRefCreatedByIDs []string
	   ClearCreatedBy bool
	   CreatedBy  *CreateOneUserWithoutUserInput
	   CreatedByID *string
	   ClearRefUpdatedBy bool
	   RefUpdatedBy  *CreateManyUserWithoutUserInput
	       AddRefUpdatedByIDs []string
	       RemoveRefUpdatedByIDs []string
	   ClearUpdatedBy bool
	   UpdatedBy  *CreateOneUserWithoutUserInput
	   UpdatedByID *string
	   ClearRoles bool
	   Roles  *CreateManyRoleWithoutUserInput
	       AddRoleIDs []string
	       RemoveRoleIDs []string
	   ClearDefaultRole bool
	   DefaultRole  *CreateOneRoleWithoutUserInput
	   DefaultRoleID *string*/
	ClearRefCreatedBy     bool
	RefCreatedBy          *UpdateManyUserInput
	AddRefCreatedByIDs    []string
	RemoveRefCreatedByIDs []string
	ClearCreatedBy        bool
	CreatedBy             *UpdateOneUserInput
	CreatedByID           *string
	ClearRefUpdatedBy     bool
	RefUpdatedBy          *UpdateManyUserInput
	AddRefUpdatedByIDs    []string
	RemoveRefUpdatedByIDs []string
	ClearUpdatedBy        bool
	UpdatedBy             *UpdateOneUserInput
	UpdatedByID           *string
	ClearRoles            bool
	Roles                 *UpdateManyRoleInput
	AddRoleIDs            []string
	RemoveRoleIDs         []string
	ClearDefaultRole      bool
	DefaultRole           *UpdateOneRoleInput
	DefaultRoleID         *string
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if i.ClearRefCreatedBy {
		m.ClearRefCreatedBy()
	}
	if v := i.AddRefCreatedByIDs; len(v) > 0 {
		m.AddRefCreatedByIDs(v...)
	}
	if v := i.RemoveRefCreatedByIDs; len(v) > 0 {
		m.RemoveRefCreatedByIDs(v...)
	}
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if i.ClearRefUpdatedBy {
		m.ClearRefUpdatedBy()
	}
	if v := i.AddRefUpdatedByIDs; len(v) > 0 {
		m.AddRefUpdatedByIDs(v...)
	}
	if v := i.RemoveRefUpdatedByIDs; len(v) > 0 {
		m.RemoveRefUpdatedByIDs(v...)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedByID; v != nil {
		m.SetUpdatedByID(*v)
	}
	if i.ClearRoles {
		m.ClearRoles()
	}
	if v := i.AddRoleIDs; len(v) > 0 {
		m.AddRoleIDs(v...)
	}
	if v := i.RemoveRoleIDs; len(v) > 0 {
		m.RemoveRoleIDs(v...)
	}
	if i.ClearDefaultRole {
		m.ClearDefaultRole()
	}
	if v := i.DefaultRoleID; v != nil {
		m.SetDefaultRoleID(*v)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
