// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/GoLabra/labra/src/api/entgql/ent/role"
	"github.com/GoLabra/labra/src/api/entgql/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges             UserEdges `json:"edges"`
	user_created_by   *string
	user_updated_by   *string
	user_default_role *string
	selectValues      sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// RefCreatedBy holds the value of the ref_created_by edge.
	RefCreatedBy []*User `json:"ref_created_by,omitempty"`
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"created_by,omitempty"`
	// RefUpdatedBy holds the value of the ref_updated_by edge.
	RefUpdatedBy []*User `json:"ref_updated_by,omitempty"`
	// UpdatedBy holds the value of the updated_by edge.
	UpdatedBy *User `json:"updated_by,omitempty"`
	// Roles holds the value of the roles edge.
	Roles []*Role `json:"roles,omitempty"`
	// DefaultRole holds the value of the default_role edge.
	DefaultRole *Role `json:"default_role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedRefCreatedBy map[string][]*User
	namedRefUpdatedBy map[string][]*User
	namedRoles        map[string][]*Role
}

// RefCreatedByOrErr returns the RefCreatedBy value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RefCreatedByOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.RefCreatedBy, nil
	}
	return nil, &NotLoadedError{edge: "ref_created_by"}
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) CreatedByOrErr() (*User, error) {
	if e.CreatedBy != nil {
		return e.CreatedBy, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// RefUpdatedByOrErr returns the RefUpdatedBy value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RefUpdatedByOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.RefUpdatedBy, nil
	}
	return nil, &NotLoadedError{edge: "ref_updated_by"}
}

// UpdatedByOrErr returns the UpdatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) UpdatedByOrErr() (*User, error) {
	if e.UpdatedBy != nil {
		return e.UpdatedBy, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "updated_by"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RolesOrErr() ([]*Role, error) {
	if e.loadedTypes[4] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// DefaultRoleOrErr returns the DefaultRole value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) DefaultRoleOrErr() (*Role, error) {
	if e.DefaultRole != nil {
		return e.DefaultRole, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: role.Label}
	}
	return nil, &NotLoadedError{edge: "default_role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldName, user.FieldEmail, user.FieldPassword, user.FieldFirstName, user.FieldLastName:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case user.ForeignKeys[0]: // user_created_by
			values[i] = new(sql.NullString)
		case user.ForeignKeys[1]: // user_updated_by
			values[i] = new(sql.NullString)
		case user.ForeignKeys[2]: // user_default_role
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				u.FirstName = value.String
			}
		case user.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				u.LastName = value.String
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = new(time.Time)
				*u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = new(time.Time)
				*u.UpdatedAt = value.Time
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_created_by", values[i])
			} else if value.Valid {
				u.user_created_by = new(string)
				*u.user_created_by = value.String
			}
		case user.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_updated_by", values[i])
			} else if value.Valid {
				u.user_updated_by = new(string)
				*u.user_updated_by = value.String
			}
		case user.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_default_role", values[i])
			} else if value.Valid {
				u.user_default_role = new(string)
				*u.user_default_role = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryRefCreatedBy queries the "ref_created_by" edge of the User entity.
func (u *User) QueryRefCreatedBy() *UserQuery {
	return NewUserClient(u.config).QueryRefCreatedBy(u)
}

// QueryCreatedBy queries the "created_by" edge of the User entity.
func (u *User) QueryCreatedBy() *UserQuery {
	return NewUserClient(u.config).QueryCreatedBy(u)
}

// QueryRefUpdatedBy queries the "ref_updated_by" edge of the User entity.
func (u *User) QueryRefUpdatedBy() *UserQuery {
	return NewUserClient(u.config).QueryRefUpdatedBy(u)
}

// QueryUpdatedBy queries the "updated_by" edge of the User entity.
func (u *User) QueryUpdatedBy() *UserQuery {
	return NewUserClient(u.config).QueryUpdatedBy(u)
}

// QueryRoles queries the "roles" edge of the User entity.
func (u *User) QueryRoles() *RoleQuery {
	return NewUserClient(u.config).QueryRoles(u)
}

// QueryDefaultRole queries the "default_role" edge of the User entity.
func (u *User) QueryDefaultRole() *RoleQuery {
	return NewUserClient(u.config).QueryDefaultRole(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(u.Password)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(u.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(u.LastName)
	builder.WriteString(", ")
	if v := u.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedRefCreatedBy returns the RefCreatedBy named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedRefCreatedBy(name string) ([]*User, error) {
	if u.Edges.namedRefCreatedBy == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedRefCreatedBy[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedRefCreatedBy(name string, edges ...*User) {
	if u.Edges.namedRefCreatedBy == nil {
		u.Edges.namedRefCreatedBy = make(map[string][]*User)
	}
	if len(edges) == 0 {
		u.Edges.namedRefCreatedBy[name] = []*User{}
	} else {
		u.Edges.namedRefCreatedBy[name] = append(u.Edges.namedRefCreatedBy[name], edges...)
	}
}

// NamedRefUpdatedBy returns the RefUpdatedBy named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedRefUpdatedBy(name string) ([]*User, error) {
	if u.Edges.namedRefUpdatedBy == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedRefUpdatedBy[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedRefUpdatedBy(name string, edges ...*User) {
	if u.Edges.namedRefUpdatedBy == nil {
		u.Edges.namedRefUpdatedBy = make(map[string][]*User)
	}
	if len(edges) == 0 {
		u.Edges.namedRefUpdatedBy[name] = []*User{}
	} else {
		u.Edges.namedRefUpdatedBy[name] = append(u.Edges.namedRefUpdatedBy[name], edges...)
	}
}

// NamedRoles returns the Roles named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedRoles(name string) ([]*Role, error) {
	if u.Edges.namedRoles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedRoles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedRoles(name string, edges ...*Role) {
	if u.Edges.namedRoles == nil {
		u.Edges.namedRoles = make(map[string][]*Role)
	}
	if len(edges) == 0 {
		u.Edges.namedRoles[name] = []*Role{}
	} else {
		u.Edges.namedRoles[name] = append(u.Edges.namedRoles[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User
