package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"

	"github.com/GoLabra/labra/src/api/entgql/ent"
)

// CreatePermission is the resolver for the createPermission field.
func (r *mutationResolver) CreatePermission(ctx context.Context, data ent.CreatePermissionInput) (*ent.Permission, error) {
	panic(fmt.Errorf("not implemented: CreatePermission - createPermission"))
}

// CreateManyPermissions is the resolver for the createManyPermissions field.
func (r *mutationResolver) CreateManyPermissions(ctx context.Context, data []*ent.CreatePermissionInput) ([]*ent.Permission, error) {
	panic(fmt.Errorf("not implemented: CreateManyPermissions - createManyPermissions"))
}

// UpdatePermission is the resolver for the updatePermission field.
func (r *mutationResolver) UpdatePermission(ctx context.Context, where ent.PermissionWhereUniqueInput, data ent.UpdatePermissionInput) (*ent.Permission, error) {
	panic(fmt.Errorf("not implemented: UpdatePermission - updatePermission"))
}

// UpdateManyPermissions is the resolver for the updateManyPermissions field.
func (r *mutationResolver) UpdateManyPermissions(ctx context.Context, where ent.PermissionWhereInput, data ent.UpdatePermissionInput) (int, error) {
	panic(fmt.Errorf("not implemented: UpdateManyPermissions - updateManyPermissions"))
}

// UpsertPermission is the resolver for the upsertPermission field.
func (r *mutationResolver) UpsertPermission(ctx context.Context, data ent.CreatePermissionInput) (*ent.Permission, error) {
	panic(fmt.Errorf("not implemented: UpsertPermission - upsertPermission"))
}

// UpsertManyPermissions is the resolver for the upsertManyPermissions field.
func (r *mutationResolver) UpsertManyPermissions(ctx context.Context, data []*ent.CreatePermissionInput) (int, error) {
	panic(fmt.Errorf("not implemented: UpsertManyPermissions - upsertManyPermissions"))
}

// DeletePermission is the resolver for the deletePermission field.
func (r *mutationResolver) DeletePermission(ctx context.Context, where ent.PermissionWhereUniqueInput) (*ent.Permission, error) {
	panic(fmt.Errorf("not implemented: DeletePermission - deletePermission"))
}

// DeleteManyPermissions is the resolver for the deleteManyPermissions field.
func (r *mutationResolver) DeleteManyPermissions(ctx context.Context, where ent.PermissionWhereInput) (int, error) {
	panic(fmt.Errorf("not implemented: DeleteManyPermissions - deleteManyPermissions"))
}

// Permissions is the resolver for the permissions field.
func (r *queryResolver) Permissions(ctx context.Context, where *ent.PermissionWhereInput, orderBy *ent.PermissionOrder, skip *int, first *int, last *int) ([]*ent.Permission, error) {
	panic(fmt.Errorf("not implemented: Permissions - permissions"))
}

// PermissionsConnection is the resolver for the permissionsConnection field.
func (r *queryResolver) PermissionsConnection(ctx context.Context, where *ent.PermissionWhereInput, orderBy *ent.PermissionOrder, skip *int, first *int, last *int) (*ent.PermissionConnection, error) {
	panic(fmt.Errorf("not implemented: PermissionsConnection - permissionsConnection"))
}
