package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"

	"github.com/GoLabra/labra/src/api/entgql/ent"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, data ent.CreateUserInput) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// CreateManyUsers is the resolver for the createManyUsers field.
func (r *mutationResolver) CreateManyUsers(ctx context.Context, data []*ent.CreateUserInput) ([]*ent.User, error) {
	panic(fmt.Errorf("not implemented: CreateManyUsers - createManyUsers"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, where ent.UserWhereUniqueInput, data ent.UpdateUserInput) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// UpdateManyUsers is the resolver for the updateManyUsers field.
func (r *mutationResolver) UpdateManyUsers(ctx context.Context, where ent.UserWhereInput, data ent.UpdateUserInput) (int, error) {
	panic(fmt.Errorf("not implemented: UpdateManyUsers - updateManyUsers"))
}

// UpsertUser is the resolver for the upsertUser field.
func (r *mutationResolver) UpsertUser(ctx context.Context, data ent.CreateUserInput) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: UpsertUser - upsertUser"))
}

// UpsertManyUsers is the resolver for the upsertManyUsers field.
func (r *mutationResolver) UpsertManyUsers(ctx context.Context, data []*ent.CreateUserInput) (int, error) {
	panic(fmt.Errorf("not implemented: UpsertManyUsers - upsertManyUsers"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, where ent.UserWhereUniqueInput) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// DeleteManyUsers is the resolver for the deleteManyUsers field.
func (r *mutationResolver) DeleteManyUsers(ctx context.Context, where ent.UserWhereInput) (int, error) {
	panic(fmt.Errorf("not implemented: DeleteManyUsers - deleteManyUsers"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, where *ent.UserWhereInput, orderBy *ent.UserOrder, skip *int, first *int, last *int) ([]*ent.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// UsersConnection is the resolver for the usersConnection field.
func (r *queryResolver) UsersConnection(ctx context.Context, where *ent.UserWhereInput, orderBy *ent.UserOrder, skip *int, first *int, last *int) (*ent.UserConnection, error) {
	panic(fmt.Errorf("not implemented: UsersConnection - usersConnection"))
}
