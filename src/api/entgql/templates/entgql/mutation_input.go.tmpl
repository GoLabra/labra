{{ define "gql_mutation_input" }}

{{- /*gotype: entgo.io/ent/entc/gen.Graph*/ -}}

{{ $pkg := base $.Config.Package }}
{{- with extend $ "Package" $pkg }}
        {{ template "header" . }}
{{- end }}

{{ template "import" $ }}

{{ $gqlNodes := filterNodes $.Nodes (skipMode "mutation_create_input" "mutation_update_input") }}
import (
    {{- range $n := $gqlNodes }}
        {{- template "import/types" $n }}
        "{{ $.Config.Package }}/{{ $n.Package }}"
    {{- end }}
)

{{- range $inputName, $input := CreateInputs $.Nodes }}

type {{ $inputName }} struct {
    {{- range $name, $type := $input }}
    {{ $name }} {{ $type }}
    {{- end }}
}
{{- end }}

{{- range $n := $.Nodes }}
    type CreateMany{{ $n.Name }}Input struct {
        Create  []*Create{{ $n.Name }}Input `json:"create,omitempty"`
        Connect []*{{ $n.Name }}WhereUniqueInput `json:"connect,omitempty"`
    }

    type CreateOne{{ $n.Name }}Input struct {
        Create  *Create{{ $n.Name }}Input `json:"create,omitempty"`
        Connect *{{ $n.Name }}WhereUniqueInput `json:"connect,omitempty"`
    }
    
    type UpdateMany{{ $n.Name }}Input struct {
        Create  []*Create{{ $n.Name }}Input `json:"create,omitempty"`
        Connect []*{{ $n.Name }}WhereUniqueInput `json:"connect,omitempty"`
        Disconnect []*{{ $n.Name }}WhereUniqueInput `json:"disconnect,omitempty"`
    }

    type UpdateOne{{ $n.Name }}Input struct {
        Create  *Create{{ $n.Name }}Input `json:"create,omitempty"`
        Connect *{{ $n.Name }}WhereUniqueInput `json:"connect,omitempty"`
        Unset *bool `json:"unset,omitempty"`
    }
{{- end }}


{{- range $n := mutationInputs $.Nodes }}
    {{- $names := nodePaginationNames $n.Type }}
    {{- $input := $n.Input }}
    {{- $fields := $n.InputFields }}
    {{- $edges := InputEdges $n }}
    {{- if $n.IsCreate }}
    // {{ $input }} represents a mutation input for creating {{ plural $names.Node | lower }}.
    {{- else }}
    // {{ $input }} represents a mutation input for updating {{ plural $names.Node | lower }}.
    {{- end }}
    type {{ $input }} struct {
        {{- range $f := $fields }}
            {{- if $f.ClearOp }}
                {{ print "Clear" $f.StructField }} bool
            {{- end }}
            {{ $f.StructField }} {{ if $f.IsPointer }}*{{ end }}{{ $f.Type }}
            {{- if $f.AppendOp }}
                {{ $f.MutationAppend }} {{ if $f.IsPointer }}*{{ end }}{{ $f.Type }}
            {{- end }}
        {{- end }}
        /*{{- range $e := $edges }}
            {{- if and (not $n.IsCreate) $e.Optional }}
                {{ $e.MutationClear }} bool
            {{- end }}
            {{- if $e.Unique }}
                {{ pascal $e.Name }}  {{ if or (not $n.IsCreate) $e.Optional }}*{{ end }}CreateOne{{$e.Type.Name}}Without{{$n.Name}}Input
                {{- $structField := print (pascal $e.Name) "ID" }}
                {{ $structField }} {{ if or (not $n.IsCreate) $e.Optional }}*{{ end }}{{ $e.Type.ID.Type }}
            {{- else }}
                {{ pascal $e.Name }}  {{ if or (not $n.IsCreate) $e.Optional }}*{{ end }}CreateMany{{$e.Type.Name}}Without{{$n.Name}}Input
                {{- if $n.IsCreate }}
                    {{- $structField := print (singular $e.Name | pascal) "IDs" }}
                    {{ $structField }} []{{ $e.Type.ID.Type }}
                {{- else }}
                    {{ $e.MutationAdd }} []{{ $e.Type.ID.Type }}
                    {{ $e.MutationRemove }} []{{ $e.Type.ID.Type }}
                {{- end }}
            {{- end }}
        {{- end }}*/
        {{- range $e := $n.Edges }}
            {{- if and (not $n.IsCreate) $e.Optional }}
                {{ $e.MutationClear }} bool
            {{- end }}
            {{ pascal $e.Name }} {{ GoInputName $n.IsCreate $n.Type $e }}
            {{- if $e.Unique }}
                {{- $structField := print (pascal $e.Name) "ID" }}
                {{ $structField }} {{ if or (not $n.IsCreate) $e.Optional }}*{{ end }}{{ $e.Type.ID.Type }}
            {{- else }}
                {{- if $n.IsCreate }}
                    {{- $structField := print (singular $e.Name | pascal) "IDs" }}
                    {{ $structField }} []{{ $e.Type.ID.Type }}
                {{- else }}
                    {{ $e.MutationAdd }} []{{ $e.Type.ID.Type }}
                    {{ $e.MutationRemove }} []{{ $e.Type.ID.Type }}
                {{- end }}
            {{- end }}
        {{- end }}

        {{- if eq $n.Name "FieldModel" }}
        {{- if $n.IsCreate }}
        Caption string
        ActualType string
        DefaultValue *string
        Required bool
        Unique bool
        IsActive bool
        RelationType enum.RelationType
        Ref *string
        {{- else}}
        Caption *string
        ActualType *string
        DefaultValue *string
        Required *bool
        Unique *bool
        IsActive *bool
        RelationType *enum.RelationType
        Ref *string
        {{- end}}
        {{- end }}
        {{- if eq $n.Name "Model" }}
        {{- if $n.IsCreate }}
        Caption string
        IsActive bool
        Restricted bool
        ManagedFromDefaultGrid bool
        AuditEnabled bool
        IsStatic bool
        ModelType enum.ModelType
        FieldsCreate []CreateFieldModelInput
        {{- else }}
        Caption *string
        IsActive *bool
        Restricted *bool
        ManagedFromDefaultGrid *bool
        AuditEnabled *bool
        IsStatic *bool
        ModelType *enum.ModelType
        FieldsCreate []CreateFieldModelInput
        FieldsUpdate []UpdateFieldModelWithoutModelInput
        FieldsDelete []FieldModelWhereUniqueInput
        {{- end }}
        {{- end }}
    }

    {{- if and (eq $n.Name "Menu") (not $n.IsCreate) }}
    // UpdateMenuPriorityLevelInput represents a mutation input for updating priority/level {{ plural $names.Node | lower }}.
    type UpdateMenuPriorityLevelInput struct {
        ID       string  `json:"id"`
        Priority *int    `json:"priority,omitempty"`
        Level    *int    `json:"level,omitempty"`
        Parent   *string `json:"parent,omitempty"`
    }
    {{- end }}

    // Mutate applies the {{ $input }} on the {{ $n.MutationName }} builder.
    func (i *{{ $input }}) Mutate(m *{{ $n.MutationName }}) {
        {{- /* The order of the operators is purposefully sorted: Clear, Set and Append */}}
        {{- range $f := $fields }}
            {{- if $f.ClearOp }}
                if i.{{ print "Clear" $f.StructField }} {
                    m.{{ print "Clear" $f.StructField }}()
                }
            {{- end }}
            {{- if or $f.Type.Nillable $f.IsPointer }}
                if v := i.{{ $f.StructField }}; v != nil {
                    m.{{ $f.MutationSet }}({{ if $f.IsPointer }}*{{ end }}v)
                }
            {{- else }}
                m.{{ $f.MutationSet }}(i.{{ $f.StructField }})
            {{- end }}
            {{- if $f.AppendOp }}
                if i.{{ $f.MutationAppend }} != nil {
                    m.{{ $f.MutationAppend }}({{ if $f.IsPointer }}*{{ end }}i.{{ $f.StructField }})
                }
            {{- end }}
        {{- end }}
        {{- range $e := $edges }}
           {{- if and (not $n.IsCreate) $e.Optional }}
                if i.{{ $e.MutationClear }} {
                    m.{{ $e.MutationClear }}()
                }
            {{- end }}
            {{- if $e.Unique }}
                {{- $structField := print (pascal $e.Name) "ID" }}
                {{- if or (not $n.IsCreate) $e.Optional }}
                    if v := i.{{ $structField }}; v != nil {
                        m.{{ $e.MutationSet }}(*v)
                    }
                {{- else }}
                    m.{{ $e.MutationSet }}(i.{{ $structField }})
                {{- end }}
            {{- else }}
                {{- if $n.IsCreate }}
                    {{- $structField := print (singular $e.Name | pascal) "IDs" }}
                    if v := i.{{ $structField }}; len(v) > 0 {
                        m.{{ $e.MutationAdd }}(v...)
                    }
                {{- else }}
                    if v := i.{{ $e.MutationAdd }}; len(v) > 0 {
                        m.{{ $e.MutationAdd }}(v...)
                    }
                    if v := i.{{ $e.MutationRemove }}; len(v) > 0 {
                        m.{{ $e.MutationRemove }}(v...)
                    }
                {{- end }}
            {{- end }}
        {{- end }}
    }

    {{- range $b := $n.Builders }}
    // SetInput applies the change-set in the {{ $input }} on the {{ $b }} builder.
    func(c *{{ $b }}) SetInput(i {{ $input }}) *{{ $b }} {
        i.Mutate(c.Mutation())
        return c
    }
    {{- end}}
{{- end }}

{{ end }}