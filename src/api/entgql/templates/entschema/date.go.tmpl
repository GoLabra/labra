{{- define "Date"}}
		field.Time("{{$.EntName}}").
			{{- if $.Required | IsFalse  }}
			Optional().
            Nillable().
			{{- end}}
			{{- if ne $.DefaultValue nil }}
			Default(func(val string) time.Time {
				if val == "now" {
					return time.Now()
				}
				v, err := time.Parse(date.DateOnlyFormat, val)
				if err != nil {
					return time.Now()
				}
				return v
			}("{{$.DefaultValue}}")).
			{{- end}}
			{{- if $.Unique | IsTrue }}
			Unique().
			{{- end}}
			SchemaType(map[string]string{
				dialect.MySQL:    "date",
				dialect.Postgres: "date",
			}).
			Annotations(
				entgql.Type("DateOnly"),    
				entgql.OrderField("{{$.EntName | CamelCase}}"),
				annotations.Field{
					Caption:   "{{$.Caption}}",
					Type: entity.FieldTypeDate,
					{{- if $.Min}}
					Min: "{{$.Min}}",
					{{- end }}
					{{- if $.Max}}
					Max: "{{$.Max}}",
					{{- end }}
					{{- if $.Private }}
					Private: {{$.Private}},
					{{- end }}
					{{- if $.DefaultValue }}
					DefaultValue: "{{$.DefaultValue}}",
					{{- end }}
				},
			),
{{- end}}