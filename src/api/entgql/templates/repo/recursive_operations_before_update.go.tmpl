{{- define "recursive_operations_before_update" }}
    {{- if $.Unique }}
        if data.{{ Pascal $.Name }}.Connect != nil {    
            toConnect, err := repository.{{ $.Type.Name }}.GetOneTx(ctx, tx, *data.{{ Pascal $.Name }}.Connect)

            if err != nil {
                return nil, err
            }

            data.{{ Pascal $.Name }}ID = &toConnect.ID
        }
        {{- if $.Optional }}
		if data.{{ Pascal $.Name }}.Unset != nil && *data.{{ Pascal $.Name }}.Unset {
			data.Clear{{ Pascal $.Name }} = true
		}
        {{- end }}
        
        {{- if eq $.Type.Annotations.Entity.Owner "User" }}
        if data.{{ Pascal $.Name }}.Create != nil {
            var createInput ent.Create{{ $.Type.Name }}Input
            err = mapstructure.Decode(data.{{ Pascal $.Name }}.Create, &createInput)
            if err != nil {
                return nil, err
            }
            
            toConnect, err := repository.{{ $.Type.Name }}.CreateTx(ctx, tx, createInput)

            if err != nil {
                return nil, err
            }

            data.{{ Pascal $.Name }}ID = &toConnect.ID
        }
        if data.{{ Pascal $.Name }}.Delete != nil && *data.{{ Pascal $.Name }}.Delete {
            itemToDelete, err := item.{{ Pascal $.Name }}(ctx)
            if err != nil {
                return nil, err
            }
            {{ $.Name }}ToDelete.ID = &itemToDelete.ID
        }
        {{- end }}
    {{- else }}
        if data.{{ Pascal $.Name }}.Connect != nil {
            for _, connect := range data.{{ Pascal $.Name }}.Connect {
                toConnect, err := repository.{{ $.Type.Name }}.GetOneTx(ctx, tx, *connect)

                if err != nil {
                    return nil, err
                }

                data.Add{{ Singular (Pascal $.Name) }}IDs = append(data.Add{{ Singular (Pascal $.Name) }}IDs , toConnect.ID)
            }
        }
        if data.{{ Pascal $.Name }}.Disconnect != nil {
            for _, disconnect := range data.{{ Pascal $.Name }}.Disconnect {
                toDisconnect, err := repository.{{ $.Type.Name }}.GetOneTx(ctx, tx, *disconnect)

                if err != nil {
                    return nil, err
                }

                data.Remove{{ Singular (Pascal $.Name) }}IDs = append(data.Remove{{ Singular (Pascal $.Name) }}IDs, toDisconnect.ID)
            }
        }
    {{- if eq $.Type.Annotations.Entity.Owner "User" }}
        if data.{{ Pascal $.Name }}.Create != nil {
            for _, create := range data.{{ Pascal $.Name }}.Create {
                var createInput ent.Create{{ $.Type.Name }}Input
                err = mapstructure.Decode(create, &createInput)
                if err != nil {
                    return nil, err
                }

                toConnect, err := repository.{{ $.Type.Name }}.CreateTx(ctx, tx, createInput)

                if err != nil {
                    return nil, err
                }

                 data.Add{{ Singular (Pascal $.Name) }}IDs = append(data.Add{{ Singular (Pascal $.Name) }}IDs , toConnect.ID)
            }
        }
        if data.{{ Pascal $.Name }}.Delete != nil {
            for _, delete := range data.{{ Pascal $.Name }}.Delete {
                _, err := repository.{{ $.Type.Name }}.DeleteTx(ctx, tx, *delete)

                if err != nil {
                    return nil, err
                }
            }
        }
    {{- end }}
    {{- end }}
{{- end }}