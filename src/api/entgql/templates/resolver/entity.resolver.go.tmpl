package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.32

import (
	"app/ent"
	"context"
)

// Create{{$.Name}} is the resolver for the create{{$.Name}} field.
func (r *mutationResolver) Create{{$.Name}}(ctx context.Context, data ent.Create{{$.Name}}Input) (*ent.{{$.Name}}, error) {
	return r.Service.{{$.Name}}.Create(ctx, data)
}

// CreateMany{{$.Name | Plural}} is the resolver for the createMany{{$.Name | Plural}} field.
func (r *mutationResolver) CreateMany{{$.Name | Plural}}(ctx context.Context, data []ent.Create{{$.Name}}Input) ([]*ent.{{$.Name}}, error) {
    var dataVal []ent.Create{{$.Name}}Input
	for _, createInput := range data {
		dataVal = append(dataVal, *createInput)
	}
	return r.Service.{{$.Name}}.CreateMany(ctx, dataVal)
}

// Update{{$.Name}} is the resolver for the update{{$.Name}} field.
func (r *mutationResolver) Update{{$.Name}}(ctx context.Context, where ent.{{$.Name}}WhereUniqueInput, data ent.Update{{$.Name}}Input) (*ent.{{$.Name}}, error) {
	return r.Service.{{$.Name}}.Update(ctx, where, data)
}

// UpdateMany{{$.Name | Plural}} is the resolver for the updateMany{{$.Name | Plural}} field.
func (r *mutationResolver) UpdateMany{{$.Name | Plural}}(ctx context.Context, where ent.{{$.Name}}WhereInput, data ent.Update{{$.Name}}Input) (int, error) {
	return r.Service.{{$.Name}}.UpdateMany(ctx, where, data)
}

// Upsert{{$.Name}} is the resolver for the upsert{{$.Name}} field.
func (r *mutationResolver) Upsert{{$.Name}}(ctx context.Context, data ent.Create{{$.Name}}Input) (*ent.{{$.Name}}, error) {
	return r.Service.{{$.Name}}.Upsert(ctx, data)
}

// UpsertMany{{$.Name | Plural}} is the resolver for the upsertMany{{$.Name | Plural}} field.
func (r *mutationResolver) UpsertMany{{$.Name | Plural}}(ctx context.Context, data []ent.Create{{$.Name}}Input) (int, error) {
	var dataVal []ent.Create{{$.Name}}Input
    for _, upsertInput := range data {
        dataVal = append(dataVal, *upsertInput)
    }
    return r.Service.{{$.Name}}.UpsertMany(ctx, dataVal)
}

// Delete{{$.Name}} is the resolver for the delete{{$.Name}} field.
func (r *mutationResolver) Delete{{$.Name}}(ctx context.Context, where ent.{{$.Name}}WhereUniqueInput) (*ent.{{$.Name}}, error) {
	return r.Service.{{$.Name}}.Delete(ctx, where)
}

// DeleteMany{{$.Name | Plural}} is the resolver for the deleteMany{{$.Name | Plural}} field.
func (r *mutationResolver) DeleteMany{{$.Name | Plural}}(ctx context.Context, where ent.{{$.Name}}WhereInput) (int, error) {
	return r.Service.{{$.Name}}.DeleteMany(ctx, where)
}

// {{$.Name | Plural}}Connection is the resolver for the {{ $.Name | Plural | LowerFirstLetter}}Connection field.
func (r *queryResolver) {{$.Name | Plural}}Connection(ctx context.Context, where *ent.{{$.Name}}WhereInput, orderBy *ent.{{$.Name}}Order, skip *int, first *int, last *int) (*ent.{{$.Name}}Connection, error) {
	return r.Service.{{$.Name}}.Connection(ctx, where, orderBy, skip, first, last)
}

// {{$.Name | Plural}} is the resolver for the {{ $.Name | Plural | LowerFirstLetter}} field.
func (r *queryResolver) {{$.Name | Plural}}(ctx context.Context, where *ent.{{$.Name}}WhereInput, orderBy *ent.{{$.Name}}Order, skip *int, first *int, last *int) ([]*ent.{{$.Name}}, error) {
    return r.Service.{{$.Name}}.Get(ctx, where, orderBy, skip, first, last)
}