package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.32

import (
	"context"
	"app/ent"
	
	"github.com/GoLabra/labrago/src/api/infrastructure/cache"
	"github.com/GoLabra/labrago/src/api/entgql/custom_model"
)

{{- range $n := $.Graph.Nodes }}
{{- $extendedFields := ($n.Fields | GetExtendedTypes) }}
{{- range $f := $extendedFields}}
{{- if eq $f.Annotations.CustomType "Model"}}
{{- if eq $f.Annotations.ActualType "Text"}}
func (r *{{$n.Name | LowerFirstLetter}}Resolver) {{$f.Name | CustomFieldName | Camel | ToTitle}}(ctx context.Context, obj *ent.{{$n.Name}}) (*custom_model.Model, error) {
	model := cache.GetModel(obj.{{$f.Name | CustomFieldName | Camel | ToTitle}}ID)
	return model, nil
}
{{- end}}
{{- if eq $f.Annotations.ActualType "List"}}
func (r *{{$n.Name | LowerFirstLetter}}Resolver) {{$f.Name | CustomFieldName | Camel | ToTitle | Plural}}(ctx context.Context, obj *ent.{{$n.Name}}) ([]*custom_model.Model, error) {
	models := cache.GetModels(obj.{{$f.Name | CustomFieldName | Camel | ToTitle}}Ids)
	return models, nil
}
{{- end}}
{{- end}}
{{- if eq $f.Annotations.CustomType "Field"}}
{{- if eq $f.Annotations.ActualType "Text"}}
func (r *{{$n.Name | LowerFirstLetter}}Resolver) {{$f.Name | CustomFieldName | Camel | ToTitle}}(ctx context.Context, obj *ent.{{$n.Name}}) (*custom_model.FieldModel, error) {
	field := cache.GetField(obj.{{$f.Name | CustomFieldName | Camel | ToTitle}}ID)
	return field, nil
}
{{- end}}
{{- if eq $f.Annotations.ActualType "List"}}
func (r *{{$n.Name | LowerFirstLetter}}Resolver) {{$f.Name | CustomFieldName | Camel | ToTitle | Plural}}(ctx context.Context, obj *ent.{{$n.Name}}) ([]*custom_model.FieldModel, error) {
	fields := cache.GetFields(obj.{{$f.Name | CustomFieldName | Camel | ToTitle}}Ids)
	return fields, nil
}
{{- end}}
{{- end}}
{{- end}}
{{- end}}
