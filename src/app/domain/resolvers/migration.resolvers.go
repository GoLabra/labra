package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"app/ent"
	"context"
)

// CreateMigration is the resolver for the createMigration field.
func (r *mutationResolver) CreateMigration(ctx context.Context, data ent.CreateMigrationInput) (*ent.Migration, error) {
	return r.Service.Migration.Create(ctx, data)
}

// CreateManyMigrations is the resolver for the createManyMigrations field.
func (r *mutationResolver) CreateManyMigrations(ctx context.Context, data []*ent.CreateMigrationInput) ([]*ent.Migration, error) {
	var dataVal []ent.CreateMigrationInput
	for _, createInput := range data {
		dataVal = append(dataVal, *createInput)
	}
	return r.Service.Migration.CreateMany(ctx, dataVal)
}

// UpdateMigration is the resolver for the updateMigration field.
func (r *mutationResolver) UpdateMigration(ctx context.Context, where ent.MigrationWhereUniqueInput, data ent.UpdateMigrationInput) (*ent.Migration, error) {
	return r.Service.Migration.Update(ctx, where, data)
}

// UpdateManyMigrations is the resolver for the updateManyMigrations field.
func (r *mutationResolver) UpdateManyMigrations(ctx context.Context, where ent.MigrationWhereInput, data ent.UpdateMigrationInput) (int, error) {
	return r.Service.Migration.UpdateMany(ctx, where, data)
}

// UpsertMigration is the resolver for the upsertMigration field.
func (r *mutationResolver) UpsertMigration(ctx context.Context, data ent.CreateMigrationInput) (*ent.Migration, error) {
	return r.Service.Migration.Upsert(ctx, data)
}

// UpsertManyMigrations is the resolver for the upsertManyMigrations field.
func (r *mutationResolver) UpsertManyMigrations(ctx context.Context, data []*ent.CreateMigrationInput) (int, error) {
	var dataVal []ent.CreateMigrationInput
	for _, upsertInput := range data {
		dataVal = append(dataVal, *upsertInput)
	}
	return r.Service.Migration.UpsertMany(ctx, dataVal)
}

// DeleteMigration is the resolver for the deleteMigration field.
func (r *mutationResolver) DeleteMigration(ctx context.Context, where ent.MigrationWhereUniqueInput) (*ent.Migration, error) {
	return r.Service.Migration.Delete(ctx, where)
}

// DeleteManyMigrations is the resolver for the deleteManyMigrations field.
func (r *mutationResolver) DeleteManyMigrations(ctx context.Context, where ent.MigrationWhereInput) (int, error) {
	return r.Service.Migration.DeleteMany(ctx, where)
}

// Migrations is the resolver for the migrations field.
func (r *queryResolver) Migrations(ctx context.Context, where *ent.MigrationWhereInput, orderBy *ent.MigrationOrder, skip *int, first *int, last *int) ([]*ent.Migration, error) {
	return r.Service.Migration.Get(ctx, where, orderBy, skip, first, last)
}

// MigrationsConnection is the resolver for the migrationsConnection field.
func (r *queryResolver) MigrationsConnection(ctx context.Context, where *ent.MigrationWhereInput, orderBy *ent.MigrationOrder, skip *int, first *int, last *int) (*ent.MigrationConnection, error) {
	return r.Service.Migration.Connection(ctx, where, orderBy, skip, first, last)
}
