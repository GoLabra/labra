package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"app/ent"
	"app/generated"
	"context"
)

// CreatePermission is the resolver for the createPermission field.
func (r *mutationResolver) CreatePermission(ctx context.Context, data ent.CreatePermissionInput) (*ent.Permission, error) {
	return r.Service.Permission.Create(ctx, data)
}

// CreateManyPermissions is the resolver for the createManyPermissions field.
func (r *mutationResolver) CreateManyPermissions(ctx context.Context, data []*ent.CreatePermissionInput) ([]*ent.Permission, error) {
	var dataVal []ent.CreatePermissionInput
	for _, createInput := range data {
		dataVal = append(dataVal, *createInput)
	}
	return r.Service.Permission.CreateMany(ctx, dataVal)
}

// UpdatePermission is the resolver for the updatePermission field.
func (r *mutationResolver) UpdatePermission(ctx context.Context, where ent.PermissionWhereUniqueInput, data ent.UpdatePermissionInput) (*ent.Permission, error) {
	return r.Service.Permission.Update(ctx, where, data)
}

// UpdateManyPermissions is the resolver for the updateManyPermissions field.
func (r *mutationResolver) UpdateManyPermissions(ctx context.Context, where ent.PermissionWhereInput, data ent.UpdatePermissionInput) (int, error) {
	return r.Service.Permission.UpdateMany(ctx, where, data)
}

// UpsertPermission is the resolver for the upsertPermission field.
func (r *mutationResolver) UpsertPermission(ctx context.Context, data ent.CreatePermissionInput) (*ent.Permission, error) {
	return r.Service.Permission.Upsert(ctx, data)
}

// UpsertManyPermissions is the resolver for the upsertManyPermissions field.
func (r *mutationResolver) UpsertManyPermissions(ctx context.Context, data []*ent.CreatePermissionInput) (int, error) {
	var dataVal []ent.CreatePermissionInput
	for _, upsertInput := range data {
		dataVal = append(dataVal, *upsertInput)
	}
	return r.Service.Permission.UpsertMany(ctx, dataVal)
}

// DeletePermission is the resolver for the deletePermission field.
func (r *mutationResolver) DeletePermission(ctx context.Context, where ent.PermissionWhereUniqueInput) (*ent.Permission, error) {
	return r.Service.Permission.Delete(ctx, where)
}

// DeleteManyPermissions is the resolver for the deleteManyPermissions field.
func (r *mutationResolver) DeleteManyPermissions(ctx context.Context, where ent.PermissionWhereInput) (int, error) {
	return r.Service.Permission.DeleteMany(ctx, where)
}

// Permissions is the resolver for the permissions field.
func (r *queryResolver) Permissions(ctx context.Context, where *ent.PermissionWhereInput, orderBy *ent.PermissionOrder, skip *int, first *int, last *int) ([]*ent.Permission, error) {
	return r.Service.Permission.Get(ctx, where, orderBy, skip, first, last)
}

// PermissionsConnection is the resolver for the permissionsConnection field.
func (r *queryResolver) PermissionsConnection(ctx context.Context, where *ent.PermissionWhereInput, orderBy *ent.PermissionOrder, skip *int, first *int, last *int) (*ent.PermissionConnection, error) {
	return r.Service.Permission.Connection(ctx, where, orderBy, skip, first, last)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
