package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"app/ent"
	"context"
)

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, data ent.CreateRoleInput) (*ent.Role, error) {
	return r.Service.Role.Create(ctx, data)
}

// CreateManyRoles is the resolver for the createManyRoles field.
func (r *mutationResolver) CreateManyRoles(ctx context.Context, data []*ent.CreateRoleInput) ([]*ent.Role, error) {
	var dataVal []ent.CreateRoleInput
	for _, createInput := range data {
		dataVal = append(dataVal, *createInput)
	}
	return r.Service.Role.CreateMany(ctx, dataVal)
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, where ent.RoleWhereUniqueInput, data ent.UpdateRoleInput) (*ent.Role, error) {
	return r.Service.Role.Update(ctx, where, data)
}

// UpdateManyRoles is the resolver for the updateManyRoles field.
func (r *mutationResolver) UpdateManyRoles(ctx context.Context, where ent.RoleWhereInput, data ent.UpdateRoleInput) (int, error) {
	return r.Service.Role.UpdateMany(ctx, where, data)
}

// UpsertRole is the resolver for the upsertRole field.
func (r *mutationResolver) UpsertRole(ctx context.Context, data ent.CreateRoleInput) (*ent.Role, error) {
	return r.Service.Role.Upsert(ctx, data)
}

// UpsertManyRoles is the resolver for the upsertManyRoles field.
func (r *mutationResolver) UpsertManyRoles(ctx context.Context, data []*ent.CreateRoleInput) (int, error) {
	var dataVal []ent.CreateRoleInput
	for _, upsertInput := range data {
		dataVal = append(dataVal, *upsertInput)
	}
	return r.Service.Role.UpsertMany(ctx, dataVal)
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, where ent.RoleWhereUniqueInput) (*ent.Role, error) {
	return r.Service.Role.Delete(ctx, where)
}

// DeleteManyRoles is the resolver for the deleteManyRoles field.
func (r *mutationResolver) DeleteManyRoles(ctx context.Context, where ent.RoleWhereInput) (int, error) {
	return r.Service.Role.DeleteMany(ctx, where)
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context, where *ent.RoleWhereInput, orderBy *ent.RoleOrder, skip *int, first *int, last *int) ([]*ent.Role, error) {
	return r.Service.Role.Get(ctx, where, orderBy, skip, first, last)
}

// RolesConnection is the resolver for the rolesConnection field.
func (r *queryResolver) RolesConnection(ctx context.Context, where *ent.RoleWhereInput, orderBy *ent.RoleOrder, skip *int, first *int, last *int) (*ent.RoleConnection, error) {
	return r.Service.Role.Connection(ctx, where, orderBy, skip, first, last)
}
