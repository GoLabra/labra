// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/migration"

	"github.com/GoLabra/labrago/src/api/entgql/enum"
)

type CreateManyMigrationInput struct {
	Create  []*CreateMigrationInput      `json:"create,omitempty"`
	Connect []*MigrationWhereUniqueInput `json:"connect,omitempty"`
}

type CreateOneMigrationInput struct {
	Create  *CreateMigrationInput      `json:"create,omitempty"`
	Connect *MigrationWhereUniqueInput `json:"connect,omitempty"`
}
type CreateManyRoleInput struct {
	Create  []*CreateRoleInput      `json:"create,omitempty"`
	Connect []*RoleWhereUniqueInput `json:"connect,omitempty"`
}

type CreateOneRoleInput struct {
	Create  *CreateRoleInput      `json:"create,omitempty"`
	Connect *RoleWhereUniqueInput `json:"connect,omitempty"`
}
type CreateManyUserInput struct {
	Create  []*CreateUserInput      `json:"create,omitempty"`
	Connect []*UserWhereUniqueInput `json:"connect,omitempty"`
}

type CreateOneUserInput struct {
	Create  *CreateUserInput      `json:"create,omitempty"`
	Connect *UserWhereUniqueInput `json:"connect,omitempty"`
}

// CreateMigrationInput represents a mutation input for creating migrations.
type CreateMigrationInput struct {
	Name      string
	Type      migration.Type
	Direction migration.Direction
	Plugin    *string
	/*
	   CreatedBy  *CreateOneUserWithoutMigrationInput
	   CreatedByID *string
	   UpdatedBy  *CreateOneUserWithoutMigrationInput
	   UpdatedByID *string*/
	CreatedBy   *CreateOneUserInput
	CreatedByID *string
	UpdatedBy   *CreateOneUserInput
	UpdatedByID *string
}

// Mutate applies the CreateMigrationInput on the MigrationMutation builder.
func (i *CreateMigrationInput) Mutate(m *MigrationMutation) {
	m.SetName(i.Name)
	m.SetType(i.Type)
	m.SetDirection(i.Direction)
	if v := i.Plugin; v != nil {
		m.SetPlugin(*v)
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if v := i.UpdatedByID; v != nil {
		m.SetUpdatedByID(*v)
	}
}

// SetInput applies the change-set in the CreateMigrationInput on the MigrationCreate builder.
func (c *MigrationCreate) SetInput(i CreateMigrationInput) *MigrationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMigrationInput represents a mutation input for updating migrations.
type UpdateMigrationInput struct {
	Name        *string
	Type        *migration.Type
	Direction   *migration.Direction
	ClearPlugin bool
	Plugin      *string
	/*
	   ClearCreatedBy bool
	   CreatedBy  *CreateOneUserWithoutMigrationInput
	   CreatedByID *string
	   ClearUpdatedBy bool
	   UpdatedBy  *CreateOneUserWithoutMigrationInput
	   UpdatedByID *string*/
	ClearCreatedBy bool
	CreatedBy      *CreateOneUserInput
	CreatedByID    *string
	ClearUpdatedBy bool
	UpdatedBy      *CreateOneUserInput
	UpdatedByID    *string
}

// Mutate applies the UpdateMigrationInput on the MigrationMutation builder.
func (i *UpdateMigrationInput) Mutate(m *MigrationMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.Direction; v != nil {
		m.SetDirection(*v)
	}
	if i.ClearPlugin {
		m.ClearPlugin()
	}
	if v := i.Plugin; v != nil {
		m.SetPlugin(*v)
	}
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedByID; v != nil {
		m.SetUpdatedByID(*v)
	}
}

// SetInput applies the change-set in the UpdateMigrationInput on the MigrationUpdate builder.
func (c *MigrationUpdate) SetInput(i UpdateMigrationInput) *MigrationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMigrationInput on the MigrationUpdateOne builder.
func (c *MigrationUpdateOne) SetInput(i UpdateMigrationInput) *MigrationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRoleInput represents a mutation input for creating roles.
type CreateRoleInput struct {
	Name string
	Type enum.RoleType
	/*
	   CreatedBy  *CreateOneUserWithoutRoleInput
	   CreatedByID *string
	   UpdatedBy  *CreateOneUserWithoutRoleInput
	   UpdatedByID *string*/
	CreatedBy   *CreateOneUserInput
	CreatedByID *string
	UpdatedBy   *CreateOneUserInput
	UpdatedByID *string
}

// Mutate applies the CreateRoleInput on the RoleMutation builder.
func (i *CreateRoleInput) Mutate(m *RoleMutation) {
	m.SetName(i.Name)
	m.SetType(i.Type)
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if v := i.UpdatedByID; v != nil {
		m.SetUpdatedByID(*v)
	}
}

// SetInput applies the change-set in the CreateRoleInput on the RoleCreate builder.
func (c *RoleCreate) SetInput(i CreateRoleInput) *RoleCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRoleInput represents a mutation input for updating roles.
type UpdateRoleInput struct {
	Name *string
	Type *enum.RoleType
	/*
	   ClearCreatedBy bool
	   CreatedBy  *CreateOneUserWithoutRoleInput
	   CreatedByID *string
	   ClearUpdatedBy bool
	   UpdatedBy  *CreateOneUserWithoutRoleInput
	   UpdatedByID *string*/
	ClearCreatedBy bool
	CreatedBy      *CreateOneUserInput
	CreatedByID    *string
	ClearUpdatedBy bool
	UpdatedBy      *CreateOneUserInput
	UpdatedByID    *string
}

// Mutate applies the UpdateRoleInput on the RoleMutation builder.
func (i *UpdateRoleInput) Mutate(m *RoleMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedByID; v != nil {
		m.SetUpdatedByID(*v)
	}
}

// SetInput applies the change-set in the UpdateRoleInput on the RoleUpdate builder.
func (c *RoleUpdate) SetInput(i UpdateRoleInput) *RoleUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRoleInput on the RoleUpdateOne builder.
func (c *RoleUpdateOne) SetInput(i UpdateRoleInput) *RoleUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name  string
	Email string
	/*
	   RefCreatedBy  *CreateManyUserWithoutUserInput
	       RefCreatedByIDs []string
	   CreatedBy  *CreateOneUserWithoutUserInput
	   CreatedByID *string
	   RefUpdatedBy  *CreateManyUserWithoutUserInput
	       RefUpdatedByIDs []string
	   UpdatedBy  *CreateOneUserWithoutUserInput
	   UpdatedByID *string
	   Role  *CreateOneRoleWithoutUserInput
	   RoleID *string*/
	RefCreatedBy    *CreateManyUserInput
	RefCreatedByIDs []string
	CreatedBy       *CreateOneUserInput
	CreatedByID     *string
	RefUpdatedBy    *CreateManyUserInput
	RefUpdatedByIDs []string
	UpdatedBy       *CreateOneUserInput
	UpdatedByID     *string
	Role            *CreateOneRoleInput
	RoleID          *string
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetName(i.Name)
	m.SetEmail(i.Email)
	if v := i.RefCreatedByIDs; len(v) > 0 {
		m.AddRefCreatedByIDs(v...)
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if v := i.RefUpdatedByIDs; len(v) > 0 {
		m.AddRefUpdatedByIDs(v...)
	}
	if v := i.UpdatedByID; v != nil {
		m.SetUpdatedByID(*v)
	}
	if v := i.RoleID; v != nil {
		m.SetRoleID(*v)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Name  *string
	Email *string
	/*
	   ClearRefCreatedBy bool
	   RefCreatedBy  *CreateManyUserWithoutUserInput
	       AddRefCreatedByIDs []string
	       RemoveRefCreatedByIDs []string
	   ClearCreatedBy bool
	   CreatedBy  *CreateOneUserWithoutUserInput
	   CreatedByID *string
	   ClearRefUpdatedBy bool
	   RefUpdatedBy  *CreateManyUserWithoutUserInput
	       AddRefUpdatedByIDs []string
	       RemoveRefUpdatedByIDs []string
	   ClearUpdatedBy bool
	   UpdatedBy  *CreateOneUserWithoutUserInput
	   UpdatedByID *string
	   ClearRole bool
	   Role  *CreateOneRoleWithoutUserInput
	   RoleID *string*/
	ClearRefCreatedBy     bool
	RefCreatedBy          *CreateManyUserInput
	AddRefCreatedByIDs    []string
	RemoveRefCreatedByIDs []string
	ClearCreatedBy        bool
	CreatedBy             *CreateOneUserInput
	CreatedByID           *string
	ClearRefUpdatedBy     bool
	RefUpdatedBy          *CreateManyUserInput
	AddRefUpdatedByIDs    []string
	RemoveRefUpdatedByIDs []string
	ClearUpdatedBy        bool
	UpdatedBy             *CreateOneUserInput
	UpdatedByID           *string
	ClearRole             bool
	Role                  *CreateOneRoleInput
	RoleID                *string
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearRefCreatedBy {
		m.ClearRefCreatedBy()
	}
	if v := i.AddRefCreatedByIDs; len(v) > 0 {
		m.AddRefCreatedByIDs(v...)
	}
	if v := i.RemoveRefCreatedByIDs; len(v) > 0 {
		m.RemoveRefCreatedByIDs(v...)
	}
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if i.ClearRefUpdatedBy {
		m.ClearRefUpdatedBy()
	}
	if v := i.AddRefUpdatedByIDs; len(v) > 0 {
		m.AddRefUpdatedByIDs(v...)
	}
	if v := i.RemoveRefUpdatedByIDs; len(v) > 0 {
		m.RemoveRefUpdatedByIDs(v...)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedByID; v != nil {
		m.SetUpdatedByID(*v)
	}
	if i.ClearRole {
		m.ClearRole()
	}
	if v := i.RoleID; v != nil {
		m.SetRoleID(*v)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
