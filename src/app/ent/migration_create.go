// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/migration"
	"app/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MigrationCreate is the builder for creating a Migration entity.
type MigrationCreate struct {
	config
	mutation *MigrationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (mc *MigrationCreate) SetName(s string) *MigrationCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetType sets the "type" field.
func (mc *MigrationCreate) SetType(m migration.Type) *MigrationCreate {
	mc.mutation.SetType(m)
	return mc
}

// SetDirection sets the "direction" field.
func (mc *MigrationCreate) SetDirection(m migration.Direction) *MigrationCreate {
	mc.mutation.SetDirection(m)
	return mc
}

// SetPlugin sets the "plugin" field.
func (mc *MigrationCreate) SetPlugin(s string) *MigrationCreate {
	mc.mutation.SetPlugin(s)
	return mc
}

// SetNillablePlugin sets the "plugin" field if the given value is not nil.
func (mc *MigrationCreate) SetNillablePlugin(s *string) *MigrationCreate {
	if s != nil {
		mc.SetPlugin(*s)
	}
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MigrationCreate) SetCreatedAt(t time.Time) *MigrationCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MigrationCreate) SetNillableCreatedAt(t *time.Time) *MigrationCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MigrationCreate) SetUpdatedAt(t time.Time) *MigrationCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MigrationCreate) SetNillableUpdatedAt(t *time.Time) *MigrationCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MigrationCreate) SetID(s string) *MigrationCreate {
	mc.mutation.SetID(s)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MigrationCreate) SetNillableID(s *string) *MigrationCreate {
	if s != nil {
		mc.SetID(*s)
	}
	return mc
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (mc *MigrationCreate) SetCreatedByID(id string) *MigrationCreate {
	mc.mutation.SetCreatedByID(id)
	return mc
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (mc *MigrationCreate) SetNillableCreatedByID(id *string) *MigrationCreate {
	if id != nil {
		mc = mc.SetCreatedByID(*id)
	}
	return mc
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (mc *MigrationCreate) SetCreatedBy(u *User) *MigrationCreate {
	return mc.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (mc *MigrationCreate) SetUpdatedByID(id string) *MigrationCreate {
	mc.mutation.SetUpdatedByID(id)
	return mc
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (mc *MigrationCreate) SetNillableUpdatedByID(id *string) *MigrationCreate {
	if id != nil {
		mc = mc.SetUpdatedByID(*id)
	}
	return mc
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (mc *MigrationCreate) SetUpdatedBy(u *User) *MigrationCreate {
	return mc.SetUpdatedByID(u.ID)
}

// Mutation returns the MigrationMutation object of the builder.
func (mc *MigrationCreate) Mutation() *MigrationMutation {
	return mc.mutation
}

// Save creates the Migration in the database.
func (mc *MigrationCreate) Save(ctx context.Context) (*Migration, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MigrationCreate) SaveX(ctx context.Context) *Migration {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MigrationCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MigrationCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MigrationCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := migration.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := migration.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := migration.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MigrationCreate) check() error {
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Migration.name"`)}
	}
	if v, ok := mc.mutation.Name(); ok {
		if err := migration.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Migration.name": %w`, err)}
		}
	}
	if _, ok := mc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Migration.type"`)}
	}
	if v, ok := mc.mutation.GetType(); ok {
		if err := migration.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Migration.type": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Direction(); !ok {
		return &ValidationError{Name: "direction", err: errors.New(`ent: missing required field "Migration.direction"`)}
	}
	if v, ok := mc.mutation.Direction(); ok {
		if err := migration.DirectionValidator(v); err != nil {
			return &ValidationError{Name: "direction", err: fmt.Errorf(`ent: validator failed for field "Migration.direction": %w`, err)}
		}
	}
	return nil
}

func (mc *MigrationCreate) sqlSave(ctx context.Context) (*Migration, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Migration.ID type: %T", _spec.ID.Value)
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MigrationCreate) createSpec() (*Migration, *sqlgraph.CreateSpec) {
	var (
		_node = &Migration{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(migration.Table, sqlgraph.NewFieldSpec(migration.FieldID, field.TypeString))
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(migration.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.GetType(); ok {
		_spec.SetField(migration.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := mc.mutation.Direction(); ok {
		_spec.SetField(migration.FieldDirection, field.TypeEnum, value)
		_node.Direction = value
	}
	if value, ok := mc.mutation.Plugin(); ok {
		_spec.SetField(migration.FieldPlugin, field.TypeString, value)
		_node.Plugin = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(migration.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(migration.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if nodes := mc.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   migration.CreatedByTable,
			Columns: []string{migration.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.migration_created_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   migration.UpdatedByTable,
			Columns: []string{migration.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.migration_updated_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Migration.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MigrationUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (mc *MigrationCreate) OnConflict(opts ...sql.ConflictOption) *MigrationUpsertOne {
	mc.conflict = opts
	return &MigrationUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Migration.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MigrationCreate) OnConflictColumns(columns ...string) *MigrationUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MigrationUpsertOne{
		create: mc,
	}
}

type (
	// MigrationUpsertOne is the builder for "upsert"-ing
	//  one Migration node.
	MigrationUpsertOne struct {
		create *MigrationCreate
	}

	// MigrationUpsert is the "OnConflict" setter.
	MigrationUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *MigrationUpsert) SetName(v string) *MigrationUpsert {
	u.Set(migration.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MigrationUpsert) UpdateName() *MigrationUpsert {
	u.SetExcluded(migration.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *MigrationUpsert) SetType(v migration.Type) *MigrationUpsert {
	u.Set(migration.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MigrationUpsert) UpdateType() *MigrationUpsert {
	u.SetExcluded(migration.FieldType)
	return u
}

// SetDirection sets the "direction" field.
func (u *MigrationUpsert) SetDirection(v migration.Direction) *MigrationUpsert {
	u.Set(migration.FieldDirection, v)
	return u
}

// UpdateDirection sets the "direction" field to the value that was provided on create.
func (u *MigrationUpsert) UpdateDirection() *MigrationUpsert {
	u.SetExcluded(migration.FieldDirection)
	return u
}

// SetPlugin sets the "plugin" field.
func (u *MigrationUpsert) SetPlugin(v string) *MigrationUpsert {
	u.Set(migration.FieldPlugin, v)
	return u
}

// UpdatePlugin sets the "plugin" field to the value that was provided on create.
func (u *MigrationUpsert) UpdatePlugin() *MigrationUpsert {
	u.SetExcluded(migration.FieldPlugin)
	return u
}

// ClearPlugin clears the value of the "plugin" field.
func (u *MigrationUpsert) ClearPlugin() *MigrationUpsert {
	u.SetNull(migration.FieldPlugin)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MigrationUpsert) SetUpdatedAt(v time.Time) *MigrationUpsert {
	u.Set(migration.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MigrationUpsert) UpdateUpdatedAt() *MigrationUpsert {
	u.SetExcluded(migration.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MigrationUpsert) ClearUpdatedAt() *MigrationUpsert {
	u.SetNull(migration.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Migration.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(migration.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MigrationUpsertOne) UpdateNewValues() *MigrationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(migration.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(migration.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Migration.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MigrationUpsertOne) Ignore() *MigrationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MigrationUpsertOne) DoNothing() *MigrationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MigrationCreate.OnConflict
// documentation for more info.
func (u *MigrationUpsertOne) Update(set func(*MigrationUpsert)) *MigrationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MigrationUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *MigrationUpsertOne) SetName(v string) *MigrationUpsertOne {
	return u.Update(func(s *MigrationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MigrationUpsertOne) UpdateName() *MigrationUpsertOne {
	return u.Update(func(s *MigrationUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *MigrationUpsertOne) SetType(v migration.Type) *MigrationUpsertOne {
	return u.Update(func(s *MigrationUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MigrationUpsertOne) UpdateType() *MigrationUpsertOne {
	return u.Update(func(s *MigrationUpsert) {
		s.UpdateType()
	})
}

// SetDirection sets the "direction" field.
func (u *MigrationUpsertOne) SetDirection(v migration.Direction) *MigrationUpsertOne {
	return u.Update(func(s *MigrationUpsert) {
		s.SetDirection(v)
	})
}

// UpdateDirection sets the "direction" field to the value that was provided on create.
func (u *MigrationUpsertOne) UpdateDirection() *MigrationUpsertOne {
	return u.Update(func(s *MigrationUpsert) {
		s.UpdateDirection()
	})
}

// SetPlugin sets the "plugin" field.
func (u *MigrationUpsertOne) SetPlugin(v string) *MigrationUpsertOne {
	return u.Update(func(s *MigrationUpsert) {
		s.SetPlugin(v)
	})
}

// UpdatePlugin sets the "plugin" field to the value that was provided on create.
func (u *MigrationUpsertOne) UpdatePlugin() *MigrationUpsertOne {
	return u.Update(func(s *MigrationUpsert) {
		s.UpdatePlugin()
	})
}

// ClearPlugin clears the value of the "plugin" field.
func (u *MigrationUpsertOne) ClearPlugin() *MigrationUpsertOne {
	return u.Update(func(s *MigrationUpsert) {
		s.ClearPlugin()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MigrationUpsertOne) SetUpdatedAt(v time.Time) *MigrationUpsertOne {
	return u.Update(func(s *MigrationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MigrationUpsertOne) UpdateUpdatedAt() *MigrationUpsertOne {
	return u.Update(func(s *MigrationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MigrationUpsertOne) ClearUpdatedAt() *MigrationUpsertOne {
	return u.Update(func(s *MigrationUpsert) {
		s.ClearUpdatedAt()
	})
}

// Exec executes the query.
func (u *MigrationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MigrationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MigrationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MigrationUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MigrationUpsertOne.ID is not supported by MySQL driver. Use MigrationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MigrationUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MigrationCreateBulk is the builder for creating many Migration entities in bulk.
type MigrationCreateBulk struct {
	config
	err      error
	builders []*MigrationCreate
	conflict []sql.ConflictOption
}

// Save creates the Migration entities in the database.
func (mcb *MigrationCreateBulk) Save(ctx context.Context) ([]*Migration, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Migration, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MigrationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MigrationCreateBulk) SaveX(ctx context.Context) []*Migration {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MigrationCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MigrationCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Migration.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MigrationUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (mcb *MigrationCreateBulk) OnConflict(opts ...sql.ConflictOption) *MigrationUpsertBulk {
	mcb.conflict = opts
	return &MigrationUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Migration.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MigrationCreateBulk) OnConflictColumns(columns ...string) *MigrationUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MigrationUpsertBulk{
		create: mcb,
	}
}

// MigrationUpsertBulk is the builder for "upsert"-ing
// a bulk of Migration nodes.
type MigrationUpsertBulk struct {
	create *MigrationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Migration.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(migration.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MigrationUpsertBulk) UpdateNewValues() *MigrationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(migration.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(migration.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Migration.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MigrationUpsertBulk) Ignore() *MigrationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MigrationUpsertBulk) DoNothing() *MigrationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MigrationCreateBulk.OnConflict
// documentation for more info.
func (u *MigrationUpsertBulk) Update(set func(*MigrationUpsert)) *MigrationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MigrationUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *MigrationUpsertBulk) SetName(v string) *MigrationUpsertBulk {
	return u.Update(func(s *MigrationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MigrationUpsertBulk) UpdateName() *MigrationUpsertBulk {
	return u.Update(func(s *MigrationUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *MigrationUpsertBulk) SetType(v migration.Type) *MigrationUpsertBulk {
	return u.Update(func(s *MigrationUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MigrationUpsertBulk) UpdateType() *MigrationUpsertBulk {
	return u.Update(func(s *MigrationUpsert) {
		s.UpdateType()
	})
}

// SetDirection sets the "direction" field.
func (u *MigrationUpsertBulk) SetDirection(v migration.Direction) *MigrationUpsertBulk {
	return u.Update(func(s *MigrationUpsert) {
		s.SetDirection(v)
	})
}

// UpdateDirection sets the "direction" field to the value that was provided on create.
func (u *MigrationUpsertBulk) UpdateDirection() *MigrationUpsertBulk {
	return u.Update(func(s *MigrationUpsert) {
		s.UpdateDirection()
	})
}

// SetPlugin sets the "plugin" field.
func (u *MigrationUpsertBulk) SetPlugin(v string) *MigrationUpsertBulk {
	return u.Update(func(s *MigrationUpsert) {
		s.SetPlugin(v)
	})
}

// UpdatePlugin sets the "plugin" field to the value that was provided on create.
func (u *MigrationUpsertBulk) UpdatePlugin() *MigrationUpsertBulk {
	return u.Update(func(s *MigrationUpsert) {
		s.UpdatePlugin()
	})
}

// ClearPlugin clears the value of the "plugin" field.
func (u *MigrationUpsertBulk) ClearPlugin() *MigrationUpsertBulk {
	return u.Update(func(s *MigrationUpsert) {
		s.ClearPlugin()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MigrationUpsertBulk) SetUpdatedAt(v time.Time) *MigrationUpsertBulk {
	return u.Update(func(s *MigrationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MigrationUpsertBulk) UpdateUpdatedAt() *MigrationUpsertBulk {
	return u.Update(func(s *MigrationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *MigrationUpsertBulk) ClearUpdatedAt() *MigrationUpsertBulk {
	return u.Update(func(s *MigrationUpsert) {
		s.ClearUpdatedAt()
	})
}

// Exec executes the query.
func (u *MigrationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MigrationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MigrationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MigrationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
