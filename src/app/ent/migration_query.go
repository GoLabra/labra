// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/migration"
	"app/ent/predicate"
	"app/ent/user"
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MigrationQuery is the builder for querying Migration entities.
type MigrationQuery struct {
	config
	ctx           *QueryContext
	order         []migration.OrderOption
	inters        []Interceptor
	predicates    []predicate.Migration
	withCreatedBy *UserQuery
	withUpdatedBy *UserQuery
	withFKs       bool
	modifiers     []func(*sql.Selector)
	loadTotal     []func(context.Context, []*Migration) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MigrationQuery builder.
func (mq *MigrationQuery) Where(ps ...predicate.Migration) *MigrationQuery {
	mq.predicates = append(mq.predicates, ps...)
	return mq
}

// Limit the number of records to be returned by this query.
func (mq *MigrationQuery) Limit(limit int) *MigrationQuery {
	mq.ctx.Limit = &limit
	return mq
}

// Offset to start from.
func (mq *MigrationQuery) Offset(offset int) *MigrationQuery {
	mq.ctx.Offset = &offset
	return mq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mq *MigrationQuery) Unique(unique bool) *MigrationQuery {
	mq.ctx.Unique = &unique
	return mq
}

// Order specifies how the records should be ordered.
func (mq *MigrationQuery) Order(o ...migration.OrderOption) *MigrationQuery {
	mq.order = append(mq.order, o...)
	return mq
}

// QueryCreatedBy chains the current query on the "created_by" edge.
func (mq *MigrationQuery) QueryCreatedBy() *UserQuery {
	query := (&UserClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(migration.Table, migration.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, migration.CreatedByTable, migration.CreatedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUpdatedBy chains the current query on the "updated_by" edge.
func (mq *MigrationQuery) QueryUpdatedBy() *UserQuery {
	query := (&UserClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(migration.Table, migration.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, migration.UpdatedByTable, migration.UpdatedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Migration entity from the query.
// Returns a *NotFoundError when no Migration was found.
func (mq *MigrationQuery) First(ctx context.Context) (*Migration, error) {
	nodes, err := mq.Limit(1).All(setContextOp(ctx, mq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{migration.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mq *MigrationQuery) FirstX(ctx context.Context) *Migration {
	node, err := mq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Migration ID from the query.
// Returns a *NotFoundError when no Migration ID was found.
func (mq *MigrationQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = mq.Limit(1).IDs(setContextOp(ctx, mq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{migration.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mq *MigrationQuery) FirstIDX(ctx context.Context) string {
	id, err := mq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Migration entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Migration entity is found.
// Returns a *NotFoundError when no Migration entities are found.
func (mq *MigrationQuery) Only(ctx context.Context) (*Migration, error) {
	nodes, err := mq.Limit(2).All(setContextOp(ctx, mq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{migration.Label}
	default:
		return nil, &NotSingularError{migration.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mq *MigrationQuery) OnlyX(ctx context.Context) *Migration {
	node, err := mq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Migration ID in the query.
// Returns a *NotSingularError when more than one Migration ID is found.
// Returns a *NotFoundError when no entities are found.
func (mq *MigrationQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = mq.Limit(2).IDs(setContextOp(ctx, mq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{migration.Label}
	default:
		err = &NotSingularError{migration.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mq *MigrationQuery) OnlyIDX(ctx context.Context) string {
	id, err := mq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Migrations.
func (mq *MigrationQuery) All(ctx context.Context) ([]*Migration, error) {
	ctx = setContextOp(ctx, mq.ctx, ent.OpQueryAll)
	if err := mq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Migration, *MigrationQuery]()
	return withInterceptors[[]*Migration](ctx, mq, qr, mq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mq *MigrationQuery) AllX(ctx context.Context) []*Migration {
	nodes, err := mq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Migration IDs.
func (mq *MigrationQuery) IDs(ctx context.Context) (ids []string, err error) {
	if mq.ctx.Unique == nil && mq.path != nil {
		mq.Unique(true)
	}
	ctx = setContextOp(ctx, mq.ctx, ent.OpQueryIDs)
	if err = mq.Select(migration.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mq *MigrationQuery) IDsX(ctx context.Context) []string {
	ids, err := mq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mq *MigrationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mq.ctx, ent.OpQueryCount)
	if err := mq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mq, querierCount[*MigrationQuery](), mq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mq *MigrationQuery) CountX(ctx context.Context) int {
	count, err := mq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mq *MigrationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mq.ctx, ent.OpQueryExist)
	switch _, err := mq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mq *MigrationQuery) ExistX(ctx context.Context) bool {
	exist, err := mq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MigrationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mq *MigrationQuery) Clone() *MigrationQuery {
	if mq == nil {
		return nil
	}
	return &MigrationQuery{
		config:        mq.config,
		ctx:           mq.ctx.Clone(),
		order:         append([]migration.OrderOption{}, mq.order...),
		inters:        append([]Interceptor{}, mq.inters...),
		predicates:    append([]predicate.Migration{}, mq.predicates...),
		withCreatedBy: mq.withCreatedBy.Clone(),
		withUpdatedBy: mq.withUpdatedBy.Clone(),
		// clone intermediate query.
		sql:  mq.sql.Clone(),
		path: mq.path,
	}
}

// WithCreatedBy tells the query-builder to eager-load the nodes that are connected to
// the "created_by" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MigrationQuery) WithCreatedBy(opts ...func(*UserQuery)) *MigrationQuery {
	query := (&UserClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withCreatedBy = query
	return mq
}

// WithUpdatedBy tells the query-builder to eager-load the nodes that are connected to
// the "updated_by" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MigrationQuery) WithUpdatedBy(opts ...func(*UserQuery)) *MigrationQuery {
	query := (&UserClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withUpdatedBy = query
	return mq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Migration.Query().
//		GroupBy(migration.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mq *MigrationQuery) GroupBy(field string, fields ...string) *MigrationGroupBy {
	mq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MigrationGroupBy{build: mq}
	grbuild.flds = &mq.ctx.Fields
	grbuild.label = migration.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Migration.Query().
//		Select(migration.FieldName).
//		Scan(ctx, &v)
func (mq *MigrationQuery) Select(fields ...string) *MigrationSelect {
	mq.ctx.Fields = append(mq.ctx.Fields, fields...)
	sbuild := &MigrationSelect{MigrationQuery: mq}
	sbuild.label = migration.Label
	sbuild.flds, sbuild.scan = &mq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MigrationSelect configured with the given aggregations.
func (mq *MigrationQuery) Aggregate(fns ...AggregateFunc) *MigrationSelect {
	return mq.Select().Aggregate(fns...)
}

func (mq *MigrationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mq); err != nil {
				return err
			}
		}
	}
	for _, f := range mq.ctx.Fields {
		if !migration.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mq.path != nil {
		prev, err := mq.path(ctx)
		if err != nil {
			return err
		}
		mq.sql = prev
	}
	return nil
}

func (mq *MigrationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Migration, error) {
	var (
		nodes       = []*Migration{}
		withFKs     = mq.withFKs
		_spec       = mq.querySpec()
		loadedTypes = [2]bool{
			mq.withCreatedBy != nil,
			mq.withUpdatedBy != nil,
		}
	)
	if mq.withCreatedBy != nil || mq.withUpdatedBy != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, migration.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Migration).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Migration{config: mq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(mq.modifiers) > 0 {
		_spec.Modifiers = mq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mq.withCreatedBy; query != nil {
		if err := mq.loadCreatedBy(ctx, query, nodes, nil,
			func(n *Migration, e *User) { n.Edges.CreatedBy = e }); err != nil {
			return nil, err
		}
	}
	if query := mq.withUpdatedBy; query != nil {
		if err := mq.loadUpdatedBy(ctx, query, nodes, nil,
			func(n *Migration, e *User) { n.Edges.UpdatedBy = e }); err != nil {
			return nil, err
		}
	}
	for i := range mq.loadTotal {
		if err := mq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mq *MigrationQuery) loadCreatedBy(ctx context.Context, query *UserQuery, nodes []*Migration, init func(*Migration), assign func(*Migration, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Migration)
	for i := range nodes {
		if nodes[i].migration_created_by == nil {
			continue
		}
		fk := *nodes[i].migration_created_by
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "migration_created_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mq *MigrationQuery) loadUpdatedBy(ctx context.Context, query *UserQuery, nodes []*Migration, init func(*Migration), assign func(*Migration, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Migration)
	for i := range nodes {
		if nodes[i].migration_updated_by == nil {
			continue
		}
		fk := *nodes[i].migration_updated_by
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "migration_updated_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (mq *MigrationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mq.querySpec()
	if len(mq.modifiers) > 0 {
		_spec.Modifiers = mq.modifiers
	}
	_spec.Node.Columns = mq.ctx.Fields
	if len(mq.ctx.Fields) > 0 {
		_spec.Unique = mq.ctx.Unique != nil && *mq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mq.driver, _spec)
}

func (mq *MigrationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(migration.Table, migration.Columns, sqlgraph.NewFieldSpec(migration.FieldID, field.TypeString))
	_spec.From = mq.sql
	if unique := mq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mq.path != nil {
		_spec.Unique = true
	}
	if fields := mq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, migration.FieldID)
		for i := range fields {
			if fields[i] != migration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mq *MigrationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mq.driver.Dialect())
	t1 := builder.Table(migration.Table)
	columns := mq.ctx.Fields
	if len(columns) == 0 {
		columns = migration.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mq.sql != nil {
		selector = mq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mq.ctx.Unique != nil && *mq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range mq.predicates {
		p(selector)
	}
	for _, p := range mq.order {
		p(selector)
	}
	if offset := mq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MigrationGroupBy is the group-by builder for Migration entities.
type MigrationGroupBy struct {
	selector
	build *MigrationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mgb *MigrationGroupBy) Aggregate(fns ...AggregateFunc) *MigrationGroupBy {
	mgb.fns = append(mgb.fns, fns...)
	return mgb
}

// Scan applies the selector query and scans the result into the given value.
func (mgb *MigrationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mgb.build.ctx, ent.OpQueryGroupBy)
	if err := mgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MigrationQuery, *MigrationGroupBy](ctx, mgb.build, mgb, mgb.build.inters, v)
}

func (mgb *MigrationGroupBy) sqlScan(ctx context.Context, root *MigrationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mgb.fns))
	for _, fn := range mgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mgb.flds)+len(mgb.fns))
		for _, f := range *mgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MigrationSelect is the builder for selecting fields of Migration entities.
type MigrationSelect struct {
	*MigrationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ms *MigrationSelect) Aggregate(fns ...AggregateFunc) *MigrationSelect {
	ms.fns = append(ms.fns, fns...)
	return ms
}

// Scan applies the selector query and scans the result into the given value.
func (ms *MigrationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ms.ctx, ent.OpQuerySelect)
	if err := ms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MigrationQuery, *MigrationSelect](ctx, ms.MigrationQuery, ms, ms.inters, v)
}

func (ms *MigrationSelect) sqlScan(ctx context.Context, root *MigrationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ms.fns))
	for _, fn := range ms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
