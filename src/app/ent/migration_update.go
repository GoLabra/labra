// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/migration"
	"app/ent/predicate"
	"app/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MigrationUpdate is the builder for updating Migration entities.
type MigrationUpdate struct {
	config
	hooks    []Hook
	mutation *MigrationMutation
}

// Where appends a list predicates to the MigrationUpdate builder.
func (mu *MigrationUpdate) Where(ps ...predicate.Migration) *MigrationUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetName sets the "name" field.
func (mu *MigrationUpdate) SetName(s string) *MigrationUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MigrationUpdate) SetNillableName(s *string) *MigrationUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// SetType sets the "type" field.
func (mu *MigrationUpdate) SetType(m migration.Type) *MigrationUpdate {
	mu.mutation.SetType(m)
	return mu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mu *MigrationUpdate) SetNillableType(m *migration.Type) *MigrationUpdate {
	if m != nil {
		mu.SetType(*m)
	}
	return mu
}

// SetDirection sets the "direction" field.
func (mu *MigrationUpdate) SetDirection(m migration.Direction) *MigrationUpdate {
	mu.mutation.SetDirection(m)
	return mu
}

// SetNillableDirection sets the "direction" field if the given value is not nil.
func (mu *MigrationUpdate) SetNillableDirection(m *migration.Direction) *MigrationUpdate {
	if m != nil {
		mu.SetDirection(*m)
	}
	return mu
}

// SetPlugin sets the "plugin" field.
func (mu *MigrationUpdate) SetPlugin(s string) *MigrationUpdate {
	mu.mutation.SetPlugin(s)
	return mu
}

// SetNillablePlugin sets the "plugin" field if the given value is not nil.
func (mu *MigrationUpdate) SetNillablePlugin(s *string) *MigrationUpdate {
	if s != nil {
		mu.SetPlugin(*s)
	}
	return mu
}

// ClearPlugin clears the value of the "plugin" field.
func (mu *MigrationUpdate) ClearPlugin() *MigrationUpdate {
	mu.mutation.ClearPlugin()
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MigrationUpdate) SetUpdatedAt(t time.Time) *MigrationUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mu *MigrationUpdate) ClearUpdatedAt() *MigrationUpdate {
	mu.mutation.ClearUpdatedAt()
	return mu
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (mu *MigrationUpdate) SetCreatedByID(id string) *MigrationUpdate {
	mu.mutation.SetCreatedByID(id)
	return mu
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (mu *MigrationUpdate) SetNillableCreatedByID(id *string) *MigrationUpdate {
	if id != nil {
		mu = mu.SetCreatedByID(*id)
	}
	return mu
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (mu *MigrationUpdate) SetCreatedBy(u *User) *MigrationUpdate {
	return mu.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (mu *MigrationUpdate) SetUpdatedByID(id string) *MigrationUpdate {
	mu.mutation.SetUpdatedByID(id)
	return mu
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (mu *MigrationUpdate) SetNillableUpdatedByID(id *string) *MigrationUpdate {
	if id != nil {
		mu = mu.SetUpdatedByID(*id)
	}
	return mu
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (mu *MigrationUpdate) SetUpdatedBy(u *User) *MigrationUpdate {
	return mu.SetUpdatedByID(u.ID)
}

// Mutation returns the MigrationMutation object of the builder.
func (mu *MigrationUpdate) Mutation() *MigrationMutation {
	return mu.mutation
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (mu *MigrationUpdate) ClearCreatedBy() *MigrationUpdate {
	mu.mutation.ClearCreatedBy()
	return mu
}

// ClearUpdatedBy clears the "updated_by" edge to the User entity.
func (mu *MigrationUpdate) ClearUpdatedBy() *MigrationUpdate {
	mu.mutation.ClearUpdatedBy()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MigrationUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MigrationUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MigrationUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MigrationUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MigrationUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok && !mu.mutation.UpdatedAtCleared() {
		v := migration.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MigrationUpdate) check() error {
	if v, ok := mu.mutation.Name(); ok {
		if err := migration.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Migration.name": %w`, err)}
		}
	}
	if v, ok := mu.mutation.GetType(); ok {
		if err := migration.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Migration.type": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Direction(); ok {
		if err := migration.DirectionValidator(v); err != nil {
			return &ValidationError{Name: "direction", err: fmt.Errorf(`ent: validator failed for field "Migration.direction": %w`, err)}
		}
	}
	return nil
}

func (mu *MigrationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(migration.Table, migration.Columns, sqlgraph.NewFieldSpec(migration.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(migration.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.GetType(); ok {
		_spec.SetField(migration.FieldType, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.Direction(); ok {
		_spec.SetField(migration.FieldDirection, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.Plugin(); ok {
		_spec.SetField(migration.FieldPlugin, field.TypeString, value)
	}
	if mu.mutation.PluginCleared() {
		_spec.ClearField(migration.FieldPlugin, field.TypeString)
	}
	if mu.mutation.CreatedAtCleared() {
		_spec.ClearField(migration.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(migration.FieldUpdatedAt, field.TypeTime, value)
	}
	if mu.mutation.UpdatedAtCleared() {
		_spec.ClearField(migration.FieldUpdatedAt, field.TypeTime)
	}
	if mu.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   migration.CreatedByTable,
			Columns: []string{migration.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   migration.CreatedByTable,
			Columns: []string{migration.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.UpdatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   migration.UpdatedByTable,
			Columns: []string{migration.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   migration.UpdatedByTable,
			Columns: []string{migration.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{migration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MigrationUpdateOne is the builder for updating a single Migration entity.
type MigrationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MigrationMutation
}

// SetName sets the "name" field.
func (muo *MigrationUpdateOne) SetName(s string) *MigrationUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MigrationUpdateOne) SetNillableName(s *string) *MigrationUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// SetType sets the "type" field.
func (muo *MigrationUpdateOne) SetType(m migration.Type) *MigrationUpdateOne {
	muo.mutation.SetType(m)
	return muo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (muo *MigrationUpdateOne) SetNillableType(m *migration.Type) *MigrationUpdateOne {
	if m != nil {
		muo.SetType(*m)
	}
	return muo
}

// SetDirection sets the "direction" field.
func (muo *MigrationUpdateOne) SetDirection(m migration.Direction) *MigrationUpdateOne {
	muo.mutation.SetDirection(m)
	return muo
}

// SetNillableDirection sets the "direction" field if the given value is not nil.
func (muo *MigrationUpdateOne) SetNillableDirection(m *migration.Direction) *MigrationUpdateOne {
	if m != nil {
		muo.SetDirection(*m)
	}
	return muo
}

// SetPlugin sets the "plugin" field.
func (muo *MigrationUpdateOne) SetPlugin(s string) *MigrationUpdateOne {
	muo.mutation.SetPlugin(s)
	return muo
}

// SetNillablePlugin sets the "plugin" field if the given value is not nil.
func (muo *MigrationUpdateOne) SetNillablePlugin(s *string) *MigrationUpdateOne {
	if s != nil {
		muo.SetPlugin(*s)
	}
	return muo
}

// ClearPlugin clears the value of the "plugin" field.
func (muo *MigrationUpdateOne) ClearPlugin() *MigrationUpdateOne {
	muo.mutation.ClearPlugin()
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MigrationUpdateOne) SetUpdatedAt(t time.Time) *MigrationUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (muo *MigrationUpdateOne) ClearUpdatedAt() *MigrationUpdateOne {
	muo.mutation.ClearUpdatedAt()
	return muo
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (muo *MigrationUpdateOne) SetCreatedByID(id string) *MigrationUpdateOne {
	muo.mutation.SetCreatedByID(id)
	return muo
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (muo *MigrationUpdateOne) SetNillableCreatedByID(id *string) *MigrationUpdateOne {
	if id != nil {
		muo = muo.SetCreatedByID(*id)
	}
	return muo
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (muo *MigrationUpdateOne) SetCreatedBy(u *User) *MigrationUpdateOne {
	return muo.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (muo *MigrationUpdateOne) SetUpdatedByID(id string) *MigrationUpdateOne {
	muo.mutation.SetUpdatedByID(id)
	return muo
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (muo *MigrationUpdateOne) SetNillableUpdatedByID(id *string) *MigrationUpdateOne {
	if id != nil {
		muo = muo.SetUpdatedByID(*id)
	}
	return muo
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (muo *MigrationUpdateOne) SetUpdatedBy(u *User) *MigrationUpdateOne {
	return muo.SetUpdatedByID(u.ID)
}

// Mutation returns the MigrationMutation object of the builder.
func (muo *MigrationUpdateOne) Mutation() *MigrationMutation {
	return muo.mutation
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (muo *MigrationUpdateOne) ClearCreatedBy() *MigrationUpdateOne {
	muo.mutation.ClearCreatedBy()
	return muo
}

// ClearUpdatedBy clears the "updated_by" edge to the User entity.
func (muo *MigrationUpdateOne) ClearUpdatedBy() *MigrationUpdateOne {
	muo.mutation.ClearUpdatedBy()
	return muo
}

// Where appends a list predicates to the MigrationUpdate builder.
func (muo *MigrationUpdateOne) Where(ps ...predicate.Migration) *MigrationUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MigrationUpdateOne) Select(field string, fields ...string) *MigrationUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Migration entity.
func (muo *MigrationUpdateOne) Save(ctx context.Context) (*Migration, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MigrationUpdateOne) SaveX(ctx context.Context) *Migration {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MigrationUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MigrationUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MigrationUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok && !muo.mutation.UpdatedAtCleared() {
		v := migration.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MigrationUpdateOne) check() error {
	if v, ok := muo.mutation.Name(); ok {
		if err := migration.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Migration.name": %w`, err)}
		}
	}
	if v, ok := muo.mutation.GetType(); ok {
		if err := migration.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Migration.type": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Direction(); ok {
		if err := migration.DirectionValidator(v); err != nil {
			return &ValidationError{Name: "direction", err: fmt.Errorf(`ent: validator failed for field "Migration.direction": %w`, err)}
		}
	}
	return nil
}

func (muo *MigrationUpdateOne) sqlSave(ctx context.Context) (_node *Migration, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(migration.Table, migration.Columns, sqlgraph.NewFieldSpec(migration.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Migration.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, migration.FieldID)
		for _, f := range fields {
			if !migration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != migration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(migration.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.GetType(); ok {
		_spec.SetField(migration.FieldType, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.Direction(); ok {
		_spec.SetField(migration.FieldDirection, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.Plugin(); ok {
		_spec.SetField(migration.FieldPlugin, field.TypeString, value)
	}
	if muo.mutation.PluginCleared() {
		_spec.ClearField(migration.FieldPlugin, field.TypeString)
	}
	if muo.mutation.CreatedAtCleared() {
		_spec.ClearField(migration.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(migration.FieldUpdatedAt, field.TypeTime, value)
	}
	if muo.mutation.UpdatedAtCleared() {
		_spec.ClearField(migration.FieldUpdatedAt, field.TypeTime)
	}
	if muo.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   migration.CreatedByTable,
			Columns: []string{migration.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   migration.CreatedByTable,
			Columns: []string{migration.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.UpdatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   migration.UpdatedByTable,
			Columns: []string{migration.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   migration.UpdatedByTable,
			Columns: []string{migration.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Migration{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{migration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
