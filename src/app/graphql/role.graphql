extend type Query {
    roles(where: RoleWhereInput, orderBy: RoleOrder, skip: Int, first: Int, last: Int): [Role!]
    rolesConnection(where: RoleWhereInput, orderBy: RoleOrder, skip: Int, first: Int, last: Int): RoleConnection!
}

extend type Mutation {
    createRole(data: CreateRoleInput!): Role!
    createManyRoles(data: [CreateRoleInput!]!): [Role]!
    updateRole(where: RoleWhereUniqueInput!, data: UpdateRoleInput!): Role!
    updateManyRoles(where: RoleWhereInput!, data: UpdateRoleInput!): Int!
    upsertRole(data: CreateRoleInput!): Role!
    upsertManyRoles(data: [CreateRoleInput!]!): Int!
    deleteRole(where: RoleWhereUniqueInput!): Role!
    deleteManyRoles(where: RoleWhereInput!): Int!
}
extend input CreateRoleInput {
    createdBy: CreateOneUserInput
    updatedBy: CreateOneUserInput
    userRoles: CreateManyUserInput
    permissions: CreateManyPermissionInput
}
extend input UpdateRoleInput {
    createdBy: UpdateOneUserInput
    updatedBy: UpdateOneUserInput
    userRoles: UpdateManyUserInput
    permissions: UpdateManyPermissionInput
}

input CreateOneRoleInput {
    create: CreateRoleInput
    connect: RoleWhereUniqueInput
}

input CreateManyRoleInput {
    create: [CreateRoleInput!]
    connect: [RoleWhereUniqueInput!]
}


input UpdateOneRoleInput {
    create: CreateRoleInput
    connect: RoleWhereUniqueInput
    unset: Boolean
}

input UpdateManyRoleInput {
    create: [CreateRoleInput!]
    connect: [RoleWhereUniqueInput!]
    disconnect: [RoleWhereUniqueInput!]
}
