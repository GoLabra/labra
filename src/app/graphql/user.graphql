extend type Query {
    users(where: UserWhereInput, orderBy: UserOrder, skip: Int, first: Int, last: Int): [User!]
    usersConnection(where: UserWhereInput, orderBy: UserOrder, skip: Int, first: Int, last: Int): UserConnection!
}

extend type Mutation {
    createUser(data: CreateUserInput!): User!
    createManyUsers(data: [CreateUserInput!]!): [User]!
    updateUser(where: UserWhereUniqueInput!, data: UpdateUserInput!): User!
    updateManyUsers(where: UserWhereInput!, data: UpdateUserInput!): Int!
    upsertUser(data: CreateUserInput!): User!
    upsertManyUsers(data: [CreateUserInput!]!): Int!
    deleteUser(where: UserWhereUniqueInput!): User!
    deleteManyUsers(where: UserWhereInput!): Int!
}
extend input CreateUserInput {
    refCreatedBy: CreateManyUserInput
    createdBy: CreateOneUserInput
    refUpdatedBy: CreateManyUserInput
    updatedBy: CreateOneUserInput
    role: CreateOneRoleInput
}
extend input UpdateUserInput {
    refCreatedBy: CreateManyUserInput
    createdBy: CreateOneUserInput
    refUpdatedBy: CreateManyUserInput
    updatedBy: CreateOneUserInput
    role: CreateOneRoleInput
}

input CreateOneUserInput {
    create: CreateUserInput
    connect: UserWhereUniqueInput
}

input CreateManyUserInput {
    create: [CreateUserInput!]
    connect: [UserWhereUniqueInput!]
}
